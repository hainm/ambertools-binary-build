#!/bin/sh
#set -xv

# Store the command
command=`echo "$0 $*" | sed -e "s/configure2/configure/"`

# configure script for Amber and AmberTools: creates config.h

#------------------------------------------------------------------------------
#  set up usage statement:
#------------------------------------------------------------------------------
usage(){
cat<<EOD

Usage: ./configure [flags] compiler

    where compiler is one of: [[ gnu, intel, pgi, or clang ]]

                              COMPILERS
                 -------------------------------------------------------------
    Compiler Set |     C     |    C++    | Fortran   |   tested vesions
    --------------------------------------------------------------------------
      gnu        |    gcc    |   g++     | gfortran  |   4.8.4 +
      intel      |    icc    |   icpc    | ifort     |   12 - 16
      pgi        |    pgcc   |   pgCC    | pgf90     |   14.9, 15.4
      clang      |    clang  |  clang++  | gfortran  |   
    --------------------------------------------------------------------------

    Most common flags:
      -mpi           Use MPI for parallelization
      -cuda          Builds the NVIDIA GPU version of pmemd (pmemd.cuda or
                     pmemd.cuda.MPI) with default SPFP mixed single/double/
                     fixed-point precision. Also builds the DPFP and SPXP versions
                     for debugging purposes.
                     (Note: Set CUDA_HOME to your cuda build tools installation
                     path; this is typically /usr/local/cuda.)
      -openmp        Use OpenMP pragmas to parallelize cpptraj, NAB, SAXS and
                     paramfit.
                     Type "make clean; make openmp" after setting this flag.
                     (Note: -openmp with -mpi or -intelmpi builds MPI+OpenMP code
		     in pmemd.MPI only with intel & gnu compilers)
      -cygwin        Include modifications for cygwin on Windows;
                     this automatically sets some optional flags.
      -windows       Compile natively for windows (maybe with cross-compiling)
                     using MinGW; this automatically sets some optional flags.
      -noX11         Do not build programs that require X11 libraries
      -macAccelerate Use optimized blas/lapack bundled with Mac OS X

    Some influential environment variables:
      MKL_HOME       If set then link in Intel's MKL libraries (intel, gnu)

For information on less-common flags, type "./configure --full-help"
===============================================================================
EOD

exit 0;
}

#------------------------------------------------------------------------------
#  nice printout of python version... right from the horse's mouth
#------------------------------------------------------------------------------
print_python_version() {
    # First argument is python executable
    $1 -c "import sys; print('.'.join(str(x) for x in sys.version_info[:3]))"
}

#------------------------------------------------------------------------------
#  Checks if a python is compatible with Amber
#------------------------------------------------------------------------------
check_compatible_python() {
    # Check version
    `which python` << EOF
import os, sys
if sys.version_info < (2, 7):
    sys.stderr.write('require Python version 2.7 or >= 3.4')
    sys.exit(1) # bad version
# See if this is a conda installation. If it is, short-circuit and end now.
# Cheapo heuristic check, but it should work

if os.path.exists(os.path.join(os.path.split(sys.executable)[0], 'conda')):
    sys.exit(0)

missing_libs = []
try:
    import numpy
except ImportError:
    missing_libs.append('numpy')
try:
    import scipy
except ImportError:
    missing_libs.append('scipy')
#try:
#    import cython
#except ImportError:
#    missing_libs.append('cython')
try:
    import matplotlib
except ImportError:
    missing_libs.append('matplotlib')
#try:
#    import ipython
#except ImportError:
#    missing_libs.append('ipython')
#try:
#    import jupyter
#except ImportError:
#    missing_libs.append('jupyter')
try:
    import Tkinter
except ImportError:
    try:
        import tkinter
    except ImportError:
        missing_libs.append('tkinter')
# Check for development headers
try:
    from distutils import sysconfig as s
except ImportError:
    sys.stderr.write("require distutils\\n")
    sys.exit(1)
else:
    if not os.path.exists(os.path.join(s.get_config_vars()['INCLUDEPY'], 'Python.h')):
        sys.stderr.write("require development version of Python")
        sys.exit(1)
if missing_libs:
    sys.stderr.write('Missing following libraries:\\n')
    sys.stderr.write('\\t%s' % '\\n\\t'.join(missing_libs))
    sys.exit(1)
# All checks came back OK
sys.exit(0)
EOF
    if [ $? -eq 0 ]; then
        echo "`which python`"
    fi
}

#------------------------------------------------------------------------------
#  set up  the full-usage statement:
#------------------------------------------------------------------------------
full_usage(){
cat<<EOD

Usage: ./configure [flags] compiler

    where compiler is one of: [[ gnu, intel, pgi, or clang ]]

                              COMPILERS
                 -----------------------------------
    Compiler Set |     C     |    C++    | Fortran   |   tested vesions
    --------------------------------------------------------------------------
      gnu        |    gcc    |   g++     | gfortran  |   4.8.4 +
      intel      |    icc    |   icpc    | ifort     |   12 - 16
      pgi        |    pgcc   |   pgCC    | pgf90     |   15.4
      clang      |    clang  |  clang++  | gfortran
    --------------------------------------------------------------------------

    Optional flags:
      -mpi           Use MPI for parallelization; disables RISM unless -rism
                     is explicitly specified.
      -cuda          Builds the NVIDIA GPU version of pmemd (pmemd.cuda or
                     pmemd.cuda.MPI) with default SPFP mixed single/double/
                     fixed-point precision. Also builds the DPFP and SPXP versions
                     for debugging purposes.
                     (Note: Set CUDA_HOME to your cuda build tools installation
                     path; this is typically /usr/local/cuda.)
      -mic_native    Builds Intel Xeon Phi native version of pmemd. (EXPERIMENTAL)
                     Requires Intel Compiler 2012 or later.  For linking MKL
                     use -mkl and unset MKL_HOME.
      -mic_offload   Builds Intel Xeon Phi offload version of pmemd. (EXPERIMENTAL)
                     Requires Intel Compiler 2012 or later.
      -mic2          Builds Intel Knight's Landing (KNL) support of pmemd. 
                     Currently only supported with intel compilers with intel
		     mpi & openmp. (Experimental)
      -mic2_spdp     Builds Intel Knight's Landing (KNL) support of pmemd with
      		     single precision. Currently only supported with intel compilers
		     with intel mpi & openmp, and intel MKL. (Experimental)
      -intelmpi      Use Intel's MPI implementation for parallelization.
      -openmp        Use OpenMP pragmas to parallelize cpptraj, NAB, SAXS and
                     paramfit.
                     Type "make clean; make openmp" after setting this flag.
		     -openmp when used with -mpi or -intelmpi builds MPI+OpenMP code
		     for pmemd.MPI. Currently, only GB simulations use MPI+OpenMP.
      -cygwin        Include modifications for cygwin on Windows;
                     this automatically sets some optional flags.
      -windows       Compile natively for windows (maybe with cross-compiling)
                     using MinGW; this automatically sets some optional flags.
      -static        Create statically linked executables (unavailable for Mac
                     OS X; may not work with some versions of MPI; usually
                     also requires the -noX11 option).
      -noX11         Do not build programs that require X11 libraries, e.g.,
                     xleap; this is generally required with the -static option.
      -noemil        Do not build the EMIL absolute free energy calculator.
      -nomtkpp       Do not build mtkpp.
      -nosse         Do not optimize for the SSE family of vectorizations.
      -macAccelerate Use optimized blas/lapack bundled with Mac OS X.
      -mkl           Use the MKL bundled with Intel compilers; incompatible with
                     MKL_HOME, GOTO, and the -macAccelerate option; requires
                     Intel compilers versions 11 or later.
      -crayxt5       Use the compiler wrappers for Cray XT5 systems (cc, CC,
                     ftn).
      -debug         Compile with debug symbols; this sets the -noopt option.
      -noopt         Disable all compiler optimizations.
      -(no)rism      Enable or disable RISM. By default, RISM is enabled for
                     serial builds and disabled for MPI builds. If you are using
                     MPI distributions other than OpenMPI or MPICH you will need
                     to set XTRA_FLIBS environment variable (see below)
                     to include Fortran 77 MPI libraries.
      -nofftw3       Skip building FFTW3 Fortran interface, hence disables
                     RISM and the FFT solver in pbsa.
      -lio           Enables the usage of LIO project with amber.
                     Prepares the code to dynamically link with LIO library
                     (QM GPU optimized routines).
      --skip-python  Skips installation of components requiring Python.
      --with-python </path/to/python> Specify a particular Python interpreter to
                     use for Python programs. Must be Python version 2.7 or
                     higher to work with all parts of AmberTools
      --python-install <local|home|global> Control where Python packages get
                     installed to. If "local", the packages get compiled to
                     \$AMBERHOME/lib and amber.sh will set PYTHONPATH
                     accordingly. If set to "home", Python packages will be
                     installed to $HOME/.local/lib. If set to "global", the
                     Python packages will be installed to the main Python
                     location for packages and modules. Default is "local"
      --with-netcdf </path/to/netcdf> Specify an external NetCDF build to use.
                     The NetCDF must have both C and Fortran interfaces.
      --with-pnetcdf </path/to/pnetcdf> Specify parallel NetCDF build to use.
                     This is only required for parallel NetCDF trajectory output
                     with cpptraj.MPI.
      -netcdfstatic  Force static linking to the external NetCDF specified via
                     the --with-netcdf option.
      -dragonegg </path/to/dragonegg.so> Use dragonegg to compile Amber. This
                     requires the gnu or clang compilers. It will use the LLVM
                     backend to generate the programs using the GCC parsers.
      -wine          Run test programs through wine (useful when cross-compiling
                     for Windows on Linux).

    Some influential environment variables:
      MKL_HOME       If set then link in Intel's MKL libraries (intel, gnu)
      GOTO           If set and MKL_HOME is not set and neither -macAccelerate
                     nor -mkl is specified then link in the GotoBLAS2 or
                     OpenBLAS library.  A typical value for this variable is
                     /usr/local/OpenBLAS/libopenblas.a.
      SSE_TYPES      CPU types for which auto-dispatch code will be produced
                     (Intel compilers version 11 and higher). Known valid
                     options are SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2. Multiple
                     options (comma separated) are permitted.
      XTRA_FLIBS     Add extra Fortran libraries that may be required when
                     linking.
===============================================================================
EOD

exit 0;
}

check_amberhome() {
   if [ -z "$AMBERHOME" ]; then
      echo ""
      echo "Your AMBERHOME environment variable is not set! It should be set to"
      echo "$1  NOT doing so may cause errors when you compile."
      exit 1
   elif [ ! -d $AMBERHOME ]; then
      echo ""
      echo "Your AMBERHOME environment variable is set to $AMBERHOME -- this does"
      echo "not appear to be a directory. It should be set to $1  NOT doing so may"
      echo "cause errors when you compile"
      exit 1
   elif [ ! "$AMBERHOME" = "$1" -a ! "$AMBERHOME" = "${1}/" ]; then
      #try checking the inode incase there is a problem with symlinks
       if [ `stat -c "%i" $AMBERHOME` != `stat -c "%i" ${1}` ]; then
           echo ""
           echo "Error: AMBERHOME is expected to be $ambhome but it is currently"
           echo "       $AMBERHOME    This will cause problems!"
           exit 1
       fi
   fi
}

# Extracts and echoes the C and Fortran compiler versions.
# The first argument is the compiler option to emit the version.
# These variables are defined: cc_version, cc_version_major, cc_version_minor,
# cc_version_patch, fc_version, fc_version_major, fc_version_minor,
# fc_version_patch.
# Emits an Error message and terminates if a compiler is not found.
# Example compiler outputs:
##gcc version 4.1.2 20080704 (Red Hat 4.1.2-54)
##icc -v
##Version 10.0
##icc -v
##icc version 15.0.0 (gcc version 4.4.7 compatibility)
##pgcc 9.0-4 64-bit target on x86-64 Linux -tp shanghai-64
##$ opencc -version
##Open64 Compiler Suite: Version 4.2.4
extract_and_emit_compiler_versions() {
    echo ""
    echo "Obtaining the $compiler compiler suite versions, e.g.:"
    echo "     $cc $1"
    # C
    if [ -z "`which $cc 2> /dev/null`" ]; then
       echo "Error: $cc could not be found!"
       exit 1
    fi
    # select the line containing the version and extract the version numbers;
    # explicitly remove words that may contain digits.
    if [ "$cygwin" = 'yes' ] ; then
      # Compilers on cygwin can print extra info
      cc_version=`$cc $1 2>&1 | grep -E "$cc |[vV]ersion " | grep -v cygwin \
                  | sed -e 's/Open64//' -e 's/^[a-zA-Z :]* //' -e 's/ .*//'`
    else
      cc_version=`$cc $1 2>&1 | grep -E "$cc |[vV]ersion " \
                  | sed -e 's/Open64//' -e 's/^[a-zA-Z :]* //' -e 's/ .*//'`
    fi
    echo "The C version is $cc_version"
    # use '.' as only field delimiter.
    cc_version=`echo $cc_version | sed -e 's/-/./'`
    cc_version_major=`echo $cc_version | cut -d'.' -f1`
    cc_version_minor=`echo $cc_version | cut -d'.' -f2`
    cc_version_patch=`echo $cc_version | cut -d'.' -f3`
    # Fortran
    if [ -z "`which $fc 2> /dev/null`" ]; then
       echo "Error: $fc could not be found!"
       exit 1
    fi
    # select the line containing the version and extract the version numbers;
    # explicitly remove words that may contain digits.
    if [ "$cygwin" = 'yes' ] ; then
      # Compilers on cygwin can print extra info
      fc_version=`$fc $1 2>&1 | grep -E "$fc |$cc |[vV]ersion " | grep -v cygwin | sed -e "s/$fc //" \
                  -e 's/Open64//' -e 's/^[a-zA-Z :]* //' -e 's/ .*//'`
    else
      fc_version=`$fc $1 2>&1 | grep -E "$fc |$cc |[vV]ersion " | sed -e "s/$fc //" \
                  -e 's/Open64//' -e 's/^[a-zA-Z :]* //' -e 's/ .*//'`
    fi
    echo "The Fortran version is $fc_version"
    # use '.' as only field delimiter.
    fc_version=`echo $fc_version | sed -e 's/-/./'`
    fc_version_major=`echo $fc_version | cut -d'.' -f1`
    fc_version_minor=`echo $fc_version | cut -d'.' -f2`
    fc_version_patch=`echo $fc_version | cut -d'.' -f3`
}

# Echoes the command string modified to remove specific flags that may
# or may not be present and/or to add new flags to the string.  The first
# argument is a string of white space delimited flags to remove (order
# doesn't matter) and the second argument is a white space delimited
# string of flags to add (order is preserved). For example, if the
# command is
#  ./configure -mpi -rism -cuda -nosse -mpi gnu
# using
#  new_command=`mod_command_args '-rism -mpi -cuda -openmp' '-nofftw3 '`
# will set $new_command to
#  ./configure -nofftw3 -cuda -nosse gnu
mod_command_args() {
    #replace white space in first argument with '\|' and add escaped parentheses
    delete=`echo $1 | sed -e 's/ \+/\\\|/g' -e 's/\(.*\)/\\\(\1\\\)/'`
    if [ "$delete" != '\(\)' ]; then
        delete="$delete "
    fi
    add=$2
    #delete the flags in the $delete list.  Note the white space
    #ensure we don't remove part of another flag.  Then insert the add
    #list at the first occurrence of whitespace
    echo `echo $command | sed -e "s/$delete//g" -e "s/ / $add /"`
}

# Used for test-compiling NetCDF with C and Fortran compilers.
# cc, fc, netcdfinc, netcdfflagc, and netcdfflagf must be set.
# If 'verbose' is specified complain about failures, otherwise be silent.
test_netcdf_compile() {
      status=0
      # Test NetCDF C
      cat > testp.c <<EOF
#include <stdio.h>
#include "netcdf.h"
int main() { printf("%s\n",nc_strerror(0)); printf("Testing\n"); return 0; }
EOF
      $cc $cflags $netcdfinc -o testp$suffix testp.c $netcdfflagc $extra_ftest > /dev/null 2> compile.err
      if [ ! -e "testp$suffix" ] ; then
        status=1
        if [ "$1" = "verbose" ] ; then
          echo "Error: Could not compile with NetCDF C interface."
          echo "       $cc $cflags $netcdfinc -o testp$suffix testp.c $netcdfflagc $staticflag"
          echo "       Compile error follows:"
          cat compile.err
          echo ""
        fi
      elif [ -z "$wine" ]; then # skip for wine for now... doesn't work
        $wine ./testp$suffix | grep "Testing" > /dev/null
        if [ "$?" -ne 0 ] ; then
          status=2
          if [ "$1" = "verbose" ] ; then
            echo "Error: Could not run test executable for NetCDF C interface."
            echo "       Ensure your run time environment is properly set up."
            echo ""
          fi
        fi
      fi
      if [ $status -gt 0 ] ; then
        return 1
      fi
      /bin/rm ./testp$suffix testp.c compile.err
      # Test NetCDF Fortran
      cat > testp.f90 <<EOF
program testf
  use netcdf
  write(6,*) nf90_strerror(0)
  write(6,*) 'testing a Fortran program'
end program testf
EOF
      $fc $fflags $netcdfinc -o testp$suffix testp.f90 $netcdfflagf > /dev/null 2> compile.err
      if [ ! -e "testp$suffix" ] ; then
        status=1
        if [ "$1" = "verbose" ] ; then
          echo "Error: Could not compile with NetCDF Fortran interface."
          echo "       $fc $fflags $netcdfinc -o testp$suffix testp.f90 $netcdfflagf"
          echo "       Compile error follows:"
          cat compile.err
          echo ""
        fi
      elif [ -z "$wine" ]; then
        $wine ./testp$suffix | grep "testing a Fortran program" > /dev/null
        if [ "$?" -ne 0 ] ; then
          status=2
          if [ "$1" = "verbose" ] ; then
            echo "Error: Could not run test executable for NetCDF Fortran interface."
            echo "       Ensure your run time environment is properly set up."
            echo ""
          fi
        fi
      fi
      if [ $status -gt 0 ] ; then
        return 1
      fi
      /bin/rm ./testp$suffix testp.f90 compile.err
      return 0
}

# Test for the presence of /bin/csh, since it's needed for installation

#------------------------------------------------------------------------------
# Process commandline configuration options:
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#  Define variables that are currently constants:
#------------------------------------------------------------------------------
bintraj='yes'
ldout=' -o '
localcp='cp'
localmv='mv'
localrm='rm'
m4='m4'
objsuffix='.o'
os=`uname -sr | awk -F . '{print $1}'`
processor=`uname -m`
if [ -z "$RANLIB" ]; then ranlib='ranlib'; else ranlib="$RANLIB"; fi

#------------------------------------------------------------------------------
#  Initialize variables that are architecture specific:
#------------------------------------------------------------------------------
if [ "$processor" = "em64t" -o "$processor" = "x86_64" ] ; then
    x86_64='yes'
else
    x86_64='no'
fi

#------------------------------------------------------------------------------
#  Initialize variables that are mainly controlled by testing:
#------------------------------------------------------------------------------
build_netcdf=''  # build control of bundled netcdf; ignored when -netcdfstatic

#------------------------------------------------------------------------------
#  Initialize variables that are controlled by commandline options or arguments
#------------------------------------------------------------------------------
amber='amber'
build_emil='yes'
compiler='unspecified'
crayxt5='no'
cuda='no'
cygwin='no'
windows='no'
debug='no'
dragonegg=''
fpp="cpp -traditional -P"
fppflags=''
freeformat_flag=''
fwarnflag=''
gnuld='yes'
gotolib='no'
hasfc='yes'
has_fftw3='yes'
installtype='serial'
intel_compiler_flag_mkl='no'
intelmpi='no'
is_mac='no'
ldflags=''
ld='ld '
lfs='yes'
lm='-lm'
macAccelerate='no'
make_shared='-shared'
make_xleap='install_xleap'
mdgx='yes'
mic='no'
mic2='no'
mic_native='no'
mic_offload='no'
mpinab=''
mpi='no'
mtkpp='install_mtkpp'
netcdf_dir=''
netcdf_flag=''
netcdfstatic='no'
pnetcdf_dir=''
pnetcdflib=''
pnetcdfinc=''
pnetcdfdef=''
noX11='false'
openmp='no'
optimise='yes'
pbsaflag='-DFFTW'
skippython='no'
spdp='no'
pysander='install'
pytraj='pytraj'
python=''
rism='default'
shared_suffix='.so'
sse='yes'
static='no'
suffix=''
warnflag=''
python_install="local"
wine=''
extra_ftest=''
yacc='$(BINDIR)/yacc'
readline='readline/libreadline.a'
pic="-fPIC"
pmemd_openmp='no'

#------------------------------------------------------------------------------
#  Initialize variables that are controlled by environment variables:
#------------------------------------------------------------------------------
gotolib='no'
mklinc=''

#------------------------------------------------------------------------------
#  Checking Arguments:
#------------------------------------------------------------------------------
if [ $# -lt 1 ]; then usage; fi

while [ $# -gt 0 ]; do
    case "$1" in
        -mpi)           mpi='yes'; mpinab='mpi';mtkpp='' ;;
        -intelmpi)      mpi='yes'; intelmpi='yes'; mpinab='mpi';mtkpp=''; rism='no'; export MPICC="mpiicc" ;;
        -cuda)          cuda='yes';rism='no';pbsaflag='';mdgx='no';mtkpp='' ;;
        -mic)           mic='yes';;
        -mic_native)    mic='yes'; build_netcdf='build_netcdf' ;;
        -mic_offload)   mic_offload='yes';mpi='yes';intelmpi='yes';mpinab='mpi';mtkpp='';;
        -mic2)          mic2='yes' ;;
        -mic2_spdp)     mic2='yes'; spdp='yes' ;;
        -rism)          rism='yes' ;;
        -norism)        rism='no' ;;
        -openmp)        openmp='yes' ;;
        -cygwin)        cygwin='yes'; lfs='no'; mtkpp=''; windows='yes'; suffix='.exe';;
        -windows)       windows='yes'; suffix='.exe'; static='yes';
                        extra_ftest='-static'; yacc="`which yacc`"; readline=''; pic='';
                        mtkpp='';;
        -nosse)         sse='no';;
        -nolfs)         lfs='no';;
        -static)        static='yes';;
        -noX11)         noX11="true";;
        -macAccelerate) macAccelerate='yes';;
        -mkl)           intel_compiler_flag_mkl='yes';;
        -crayxt5)       crayxt5='yes';;
        -nomtkpp)       mtkpp='';;
        -debug)         debug='yes';;
        -noopt)         optimise='no';;
        -noemil)        build_emil='no';;
        -nofftw3)       rism='no'; pbsaflag=''; mdgx='no'; has_fftw3='no';;
        -wine)          wine='wine';;
        -lio)           lio='yes' ;;
	--skip-python)  skippython='yes' ;;
        --with-python)  shift; python="$1";;
        --with-netcdf)  shift; netcdf_dir="$1";;
        --with-pnetcdf) shift; pnetcdf_dir="$1" ;;
        --python-install) shift; python_install="$1";;
        -netcdfstatic)  netcdfstatic='yes' ;;
        -dragonegg)     shift; dragonegg="$1";;
        -g95)
            echo "This flag has been removed. Set the FC environment variable to"
            echo "g95 in order to use g95"; exit 1;;
        --no-updates)   ;;
        -h|-H|--h|--hel|--help|-help) usage;;
        -fh|--full|--full-|--full-h|--full-he|--full-hel|--full-help) full_usage;;

        -*) echo "Error: Unknown flag: $1"
            echo "       Type './configure -help' for options."
            exit 1;;

        *) if [ $# -gt 1 ]; then
             echo "Error: Unknown compiler: $1"
             echo "       Type './configure -help' for options."
             exit 1
           fi

           compiler=$1 ;;
    esac
    shift
done
#-------------------------------------------------------------------------------
#  Check for incompatibilities with mic
#-------------------------------------------------------------------------------
if [ "$mic" = 'yes' -o "$mic_offload" = 'yes' ]; then
    if [ "$compiler" != "intel" ]; then
        echo "Error: Xeon Phi support requires the Intel compiler! "
        exit 1
    elif [ "$cuda" = 'yes' ]; then
        echo "Error: Xeon Phi and cuda are mutually exclusive."
        exit 1
    elif [ -n "$MKL_HOME" ]; then
        echo "Warning: For linking MKL on Xeon Phi use -mkl and unset MKL_HOME."
    fi
fi

if [ "$openmp" = 'yes' -a "$mpi" = 'yes' ]; then
    echo "MPI with OpenMP is not supported for AmberTools. Building MPI only."
    echo "Building PMEMD with openmp and mpi support."
    openmp='no'
    if [ "$intelmpi" = 'yes' ]; then
        pmemd_openmp='yes'
    fi
fi

#-------------------------------------------------------------------------------
#  See if we have Amber so we know if we should set it up or not
#-------------------------------------------------------------------------------

# Here we check the existence of the Amber Makefile to see if we
# should build Amber as well
if [ ! -f ../../src/Makefile ]; then
    amber=''
fi

#-------------------------------------------------------------------------------
#  See where we want to install our Python packages (and make sure it's legal)
#-------------------------------------------------------------------------------
if [ "$skippython" = "no" ]; then
  if [ "$python_install" != "local" -a "$python_install" != "home" -a \
       "$python_install" != "global" ]; then
      echo "--python-install must be set to \"local\", \"home\", or \"global\""
      echo "It is set to $python_install"
      exit 1
  fi
fi

#-------------------------------------------------------------------------------
#  Platform specific:
#-------------------------------------------------------------------------------
if [ ! -z $dragonegg ]; then
    if [ ! "$compiler" = "gnu" -a ! "$compiler" = "clang" ]; then
        echo "Error: Dragonegg must be used with the GNU or Clang compilers !"
        echo "       The compiler specified was $compiler."
        exit 1
    fi
fi

# See if we are cross-compiling for windows
if [ "$windows" = "yes" -a "`python -c "import sys; print(sys.platform)"`" != "win32" ]; then
    hostflag="--host=x86_64-w64-mingw32"
fi

# Cygwin-specific settings
if [ "$cygwin" = 'yes' ] ; then
  shared_suffix='.dll'
  pic=''
  # Warnings about specific functionality under Cygwin
  echo ""
  echo "Warning: SEBOMD functionality is known not to work correctly under Cygwin."
  echo ""
fi

if [ `uname -s|awk '{print $1}'` = "Darwin" ]; then
    is_mac='yes'
    shared_suffix='.dylib'
    make_shared='-dynamiclib'
    static='no'
    osx_version=`/usr/bin/sw_vers -productVersion | awk '{print $1}'`
    case "$osx_version" in
        *10\.6*)
            x86_64='yes' ;;
        *) ;;
    esac
    osx_cpu=`/usr/bin/machine | awk '{print $1}'`
    case "$osx_cpu" in
        ppc*)
           sse='no'
           fpp="/usr/bin/cpp -traditional -P" ;;
        *) ;;
    esac
elif [ "$macAccelerate" = 'yes' ]; then
    echo "Warning:  This is not a Macintosh, disabling -macAccelerate."
    macAccelerate='no'
fi

if [ "$macAccelerate" = 'no' ]; then
    if [ -n "$MKL_HOME" ]; then
        fppflags="$fppflags -DMKL"
        mklinc="-I$MKL_HOME/include"
    else
        if [ -n "$GOTO" ]; then
            gotolib='yes'
            echo "Using optimized BLAS routines in $GOTO"
        fi
    fi
fi

if [ "$intel_compiler_flag_mkl" = 'yes' ]; then
    fppflags="$fppflags -DMKL"
    if [ "$compiler" != 'intel' ]; then
        echo "Error: The -mkl family of flags requires the Intel compiler !"
        exit 1
    elif [ -n "$MKL_HOME" ]; then
        echo "Error: The -mkl family of flags is incompatible with MKL_HOME !"
        exit 1
    elif [ "$gotolib" = 'yes' ]; then
        echo "Error: The -mkl family of flags is incompatible with GOTO !"
        exit 1
    elif [ "$macAccelerate" = 'yes' ]; then
        echo "Error: The -mkl family of flags is incompatible with -macAccelerate !"
        exit 1
    fi
fi

ld_version=`ld -v 2>&1 | awk '{print $1}'`
case "$ld_version" in
    *GNU*)
        gnuld='yes';;
    *)
        gnuld='no' ;;
esac

#------------------------------------------------------------------------------
#  Set up defaults that work for most machines:
#------------------------------------------------------------------------------

workdir=`pwd`
AMBERTOOLSHOME=`dirname $workdir`
ambhome=`dirname $AMBERTOOLSHOME`
check_amberhome $ambhome

# Note: ambercflags and ambercxxflags should only be passed
# to code written and/or maintained by the Amber developers
#  e.g. not to fftw3, netcdf, boost, etc.

cc=cc
cflags="$pic $CFLAGS"
cnooptflags=
coptflags=-O
ambercflags=
cplusplus=CC
cxxflags="$pic $CXXFLAGS"
cxxnooptflags=
cxxoptflags="$pic -O"
fflags="$pic $FFLAGS"
ambercxxflags=
fc_cxx_link_flag="-lstdc++"
pycflags=
nabflags=
free_format=-FR
#  C versions, if compiled from source:
flibs="-larpack -llapack -lblas "
#  Fortran versions, if compiled from source:
flibsf="-larpack -llapack -lblas"
# only used when the user requests a static build or when a static build is
# automatically set, eg, windows:
staticflag='-static'
omp_flag=
mpi_flag=
fp_flags=
lex=flex
flibs_mkl=
lapack=install
blas=install
f2c=skip
ucpp=install
cpp="ucpp -l"
# compile pmemd prmtop_dat at lower optimization for buggy gnu 5.x: see bug 303.
pmemd_gnu_bug303=

#-----------------------------------
# skip building of xleap?
#-----------------------------------
if [ "$noX11" = "true" ]; then
    make_xleap="skip_xleap"
    xhome=''
else
    if [ -d /usr/X11R6/lib ]; then
        xhome='/usr/X11R6'
    elif [ -d /usr/X11/lib ]; then    # location for MacOSX 10.11
        xhome='/usr/X11'
    elif [ -d /usr/lib/x86_64-linux-gnu ]; then
        xhome='/usr'
    elif [ -f /usr/lib/i386-linux-gnu/libX11.a ]; then
        xhome='/usr'
    elif [ -f /usr/lib/libX11.a -o -f /usr/lib/libX11.so \
           -o -f /usr/lib/libX11.dll.a \
           -o -f /usr/lib64/libX11.a -o -f /usr/lib64/libX11.so ]; then
        xhome='/usr'
    elif [ -f /opt/local/lib/libX11.a -o -f /opt/local/lib/libX11.dylib ]; then
        xhome='/opt/local'
    else
        echo "Could not find the X11 libraries; you may need to edit config.h"
        echo "   to set the XHOME and XLIBS variables."
    fi

    if [ "$xhome" != "/usr" ]; then
        # Do not add -L/usr/lib to linker. This is always in the standard path
        # and could cause issues trying to build MPI when /usr has an MPI
        # installed that you *don't* want to use.
        xlibs="-L$xhome/lib"
        if [ "$x86_64" = 'yes' ]; then
            xlibs="-L$xhome/lib64 $xlibs"
        fi
    fi
    if [ -d /usr/lib/x86_64-linux-gnu ]; then
        xlibs="-L/usr/lib/x86_64-linux-gnu $xlibs"
    fi
fi
#--------------------------------------------------------------------------
#  Check if the X11 library files for XLEaP are present:
#--------------------------------------------------------------------------
if [ "$noX11" = "false" ]; then
    if [ -r "$xhome/lib/libXt.a"  -o -r "$xhome/lib/libXt.dll.a" \
         -o -r "$xhome/lib/libXt.dylib" \
         -o -r /usr/lib/x86_64-linux-gnu/libXt.a \
         -o -r /usr/lib/x86_64-linux-gnu/libXt.so \
         -o -r /usr/lib/i386-linux-gnu/libXt.a \
         -o -r /usr/lib/i386-linux-gnu/libXt.so \
         -o -r /usr/lib/libXt.so \
         -o -r /usr/lib64/libXt.so \
         -o -r /usr/X11/lib/libXt.dylib \
         -o "$x86_64" = 'yes' -a -r "$xhome/lib64/libXt.a" ]
    then
        empty_statement=
    else
        echo "Error: The X11 libraries are not in the usual location !"
        echo "       To search for them try the command: locate libXt"
        echo "       On new Fedora OS's install the libXt-devel libXext-devel"
        echo "       libX11-devel libICE-devel libSM-devel packages."
        echo "       On old Fedora OS's install the xorg-x11-devel package."
        echo "       On RedHat OS's install the XFree86-devel package."
        echo "       On Ubuntu OS's install the xorg-dev and xserver-xorg packages."
        echo
        echo "          ...more info for various linuxes at ambermd.org/ubuntu.html"
        echo
        echo "       To build Amber without XLEaP, re-run configure with '-noX11:"
        echo "            `mod_command_args '' '-noX11'`"
        exit 1
    fi

    if [ -d /usr/include/X11/extensions -o $is_mac = "yes" ]
    then
        empty_statement=
    elif [ "$is_mac" = "no" ]; then
        echo "Error: The X11 extensions headers are not in the usual location!"
        echo "       To search for them try the command: locate X11/extensions"
        echo "       On new Fedora OSes install libXext-devel"
        echo "       On RedHat OSes install libXext-devel"
        echo "       To build Amber without XLEaP, re-run configure with '-noX11:"
        echo "            `mod_command_args '' '-noX11'`"
        exit 1
    fi
fi

#------------------------------------------------------------------------------
#  Find the version of Python we're going to use. Start by looking for 2.7 and
#         work your way down to 2.4. Standard systems label them via python2.x. If we
#  can't find any of those, just use "which python" if its version is sufficient
#------------------------------------------------------------------------------

# Loop through all allowed pythons. Only do this if we didn't specify one to
# configure
if [ "$skippython" = "no" ]; then
  if [ ! -x "$AMBERHOME/miniconda/bin/python" -a -z "$python" ]; then
      python=`check_compatible_python`
      if [ -z "$python" -a "$cuda" = 'no' ]; then
        echo ""
        echo ""
        if [ "$cygwin" = 'yes' ] ; then
          echo "No compatible Python installation found."
          python="`which python`"
          if [ ! -z "$python" ] ; then
            echo "I will try to use '$python', but not all Python components"
            echo "in Amber will work correctly. If installation fails try to"
            echo "reconfigure with '--skip-python'."
          else
            echo ""
            echo "Warning: No python found. Python components will be disabled."
            echo ""
            skippython='yes'
          fi
        else
          echo "No compatible Python installation found. I can download one from Continuum"
          echo "via Miniconda with all prerequisites. This will only need to be done once."
          echo "This may take several minutes and will require Internet access."
          echo "(You can also install missing packages by yourself)"
          echo ""
          printf "Should I do that? [y/n] "
          read answer
          answer=`python -c "print('$answer'[0].lower())"`
          while [ -z "$python" ]; do
              if [ "$answer" = 'y' ]; then
                  echo "Downloading an Amber-compatible Python version 2.7 via Miniconda "
                  echo "and installing it. This may take several minutes."
                  echo ""
                  echo "================================================================================"
                  ./configure_python
                  if [ $? -ne 0 ]; then
                      echo "Problem installing Miniconda... see error above."
                      exit 1
                  fi
                  echo "================================================================================"
                  echo "Done installing Miniconda!"
                  python="$AMBERHOME/bin/amber.python"
              elif [ "$answer" = 'n' ]; then
                  echo "OK. I will try to use `which python`, but not all Python components"
                  echo "in Amber will work correctly..."
                  python="`which python`"
              else
                  printf "Sorry, I didn't understand. Should I do that? [y/n] "
                  read answer
                  answer=`python -c "print('$answer'[0].lower())"`
              fi
          done
        fi
      else
          echo "Compatible Python found! Using $python"
      fi
  elif [ -z "$python" ]; then
      if [ ! -f "$AMBERHOME/bin/amber.python" -o ! -f "$AMBERHOME/bin/amber.conda" ]; then
          cwd=`pwd`
          cd $AMBERHOME/bin
          ln -sf ../miniconda/bin/python amber.python
          ln -sf ../miniconda/bin/conda amber.conda
          ln -sf ../miniconda/bin/ipython amber.ipython
          ln -sf ../miniconda/bin/jupyter amber.jupyter
          ln -sf ../miniconda/bin/pip amber.pip
          cd $cwd
      fi
      python="$AMBERHOME/bin/amber.python"
      echo "Using the AmberTools miniconda installation in $AMBERHOME/miniconda"
      printf "version "
      print_python_version $python
  else
      # Check that the Python requested exists
      if [ ! -x $python ]; then
          echo "--with-python $python : $python cannot be found and/or run"
          exit 1
      fi
      # Now test that it's at least python(-like)
      $python -c "print('Hello world')" 2>/dev/null |
              (grep "Hello world" 2>&1 > /dev/null)
      if [ $? -ne 0 ]; then
          echo "Could not run Python $python"
          exit 1
      fi
      printf "Using requested Python: $python; version "
      print_python_version $python
  fi
fi

#------------------------------------------------------------------------------
#  Filter out situations in which MTK++ should not be built
#------------------------------------------------------------------------------

if [ "$crayxt5" = 'yes' -a "$mtkpp" = 'install_mtkpp' ]; then
    echo "Note: MTK++ is not compatible with the '-crayxt5' flag"
    mktpp=''
fi
if [ ! -d mtkpp ]; then
    mtkpp=''
fi

#------------------------------------------------------------------------------
#  -nofftw3 is the default for MPI
#------------------------------------------------------------------------------

if [ "$mpi" = 'yes' -a "$rism" != 'yes' ]; then
    rism='no'
    pbsaflag=''
fi

#------------------------------------------------------------------------------
#  Determine which type of installation we're doing
#------------------------------------------------------------------------------
if [ "$cuda" = 'yes' ]; then
   if [ "$mpi" = 'yes' ]; then
      installtype='cuda_parallel'
   else
      installtype='cuda_serial'
   fi
elif [ "$mic" = 'yes' ]; then
   if [ "$mpi" = 'yes' ]; then
      installtype='mic_parallel'
   else
      installtype='mic'
   fi
elif [ "$mic_offload" = 'yes' ]; then
   installtype='mic_offload'
elif [ "$mic2" = 'yes' ]; then
   installtype='mic2'
elif [ "$mpi" = 'yes' ]; then
   installtype='parallel'
elif [ "$openmp" = 'yes' ]; then
   installtype='openmp'
else
   installtype='serial'
fi

#------------------------------------------------------------------------------
#  Check for cuda incompatibilities or missing files:
#------------------------------------------------------------------------------
if [ "$cuda" = 'yes' ]; then
    if [ -z "$CUDA_HOME" ]; then
        echo "Error: CUDA_HOME is not set. This must point to your NVIDIA tools installation"
        exit 1
    fi
    if [ ! "$compiler" = "gnu" -a ! "$compiler" = "intel" -a ! "$compiler" = "clang" ]; then
        echo "Error: NVIDIA cuda compilation works only with gnu, Intel, or clang compilers"
        exit 1
    fi
    if [ ! -x "$CUDA_HOME/bin/nvcc" ]; then
        echo "Error: nvcc cuda compiler not found in $CUDA_HOME/bin/"
        exit 1
    fi

    if [ -z "$NVCC" ]; then nvcc="$CUDA_HOME/bin/nvcc"; else nvcc="$NVCC"; fi
    #Note at present we do not include SM3.5 or SM3.7 since they sometimes show performance
    #regressions over just using SM3.0.
    #SM6.2 = ??? 
    sm62flags='-gencode arch=compute_62,code=sm_62'
    #SM6.1 = GP104 = GTX-1080, GP102 = Titan-X[P]
    sm61flags='-gencode arch=compute_61,code=sm_61'
    #SM6.0 = GP100 / P100 / DGX-1 - Provisional support, future feature additions to code may
    #                               adversely impact performance.
    sm60flags='-gencode arch=compute_60,code=sm_60'
    #SM5.3 = GM200 [Grid] = M60, M40?
    sm53flags='-gencode arch=compute_53,code=sm_53'
    #SM5.2 = GM200 = GTX-Titan-X, M6000 etc.
    sm52flags='-gencode arch=compute_52,code=sm_52'
    #SM5.0 = GM204 = GTX980, 970 etc
    sm50flags='-gencode arch=compute_50,code=sm_50'
    #SM3.7 = GK210 = K80
    sm37flags='-gencode arch=compute_37,code=sm_37'
    #SM3.5 = GK110 + 110B = K20, K20X, K40, GTX780, GTX-Titan, GTX-Titan-Black, GTX-Titan-Z
    sm35flags='-gencode arch=compute_35,code=sm_35'
    #SM3.0 = GK104 = K10, GTX680, 690 etc.
    sm30flags='-gencode arch=compute_30,code=sm_30'
    #SM2.0 = All GF variants = C2050, 2075, M2090, GTX480, GTX580 etc.
    sm20flags='-gencode arch=compute_20,code=sm_20'
    cudaversion=`$nvcc --version | grep 'release' | cut -d' ' -f5 | cut -d',' -f1`
    if [ "$cudaversion" = "7.5" ]; then
      echo "CUDA Version $cudaversion detected"
      echo "Configuring for SM2.0, SM3.0, SM5.0, SM5.2 and SM5.3"
      echo "BE AWARE: CUDA 7.5 does not support GTX-1080, Titan-XP, DGX-1 or other Pascal based GPUs."
      nvccflags="$sm20flags $sm30flags $sm50flags $sm52flags $sm53flags"
    elif [ "$cudaversion" = "8.0" ]; then
      echo "CUDA Version $cudaversion detected"
      echo "Configuring for SM2.0, SM3.0, SM5.0, SM5.2, SM5.3, SM6.0 and SM6.1"
      nvccflags="$sm20flags $sm30flags $sm50flags $sm52flags $sm53flags $sm60flags $sm61flags"
    else
      echo "Error: Unsupported CUDA version $cudaversion detected."
      echo "       AMBER 16 requires CUDA version 7.5 or 8.0"
      exit 1
    fi
    nvcc="$nvcc $nvccflags"

fi

#------------------------------------------------------------------------------
#  Case statement identifying the architecture/compilers:
#------------------------------------------------------------------------------

case "$compiler" in

#################### gcc #######
gnu)
    # Check dragonegg
    if [ ! -z "$dragonegg" ]; then
        if [ ! -f "$dragonegg" ]; then
            echo "Error: Could not find the dragonegg plugin library [$dragonegg]"
            exit 1
        fi
    fi

    if [ "$intelmpi" = 'yes' ]; then
        echo "Intel MPI must be used with the Intel compilers."
        exit 1
    fi

    flibs_arch="-lgfortran -w"
    flibsf_arch=
    if [ -z "$CC" ]; then cc=gcc; else cc="$CC"; fi
    cflags="$pic $CFLAGS"
    ambercflags=""
    if [ -z "$CXX" ]; then cplusplus=g++; else cplusplus="$CXX"; fi
    cxxflags="$pic $CXXFLAGS"
    ambercxxflags=""
    if [ -z "$FC" ]; then fc=gfortran; else fc="$FC"; fi
    ld="$fc"
    fflags="$pic $FFLAGS"

    warnflag='-Wall -Wno-unused-function'
    fwarnflag="$warnflag"
    # If -noopt has been requested, force lack of optimisation;
    # otherwise, use the default levels. Since cflags, cxxflags
    # and fflags are used everywhere, and *optflags and
    # *nooptflags are not (some parts of Amber and AmberTools use
    # neither *optflags nor *nooptflags), we'll put -O0 in cflags
    # and so forth instead.
    if [ "$optimise" = 'no' ]; then
      cflags="$cflags -O0"
      cnooptflags=""
      coptflags=""
      cxxflags="$cxxflags -O0"
      cxxnooptflags=""
      cxxoptflags="$pic"
      fflags="$fflags -O0"
      fnooptflags=""
      foptflags=""
    else
      cnooptflags=
      coptflags="-O3"
      cxxnooptflags=
      cxxoptflags="$pic -O3"
      fnooptflags="-O0"
      foptflags="-O3"
    fi

    # Debugging options
    if [ "$debug" = 'yes' ]; then
      cflags="$cflags -g"
      cxxflags="$cxxflags -g"
      fflags="$fflags -g"
    fi

    extract_and_emit_compiler_versions '-v'

    if [ $cc_version_major -ge 4 -a $cc_version_minor -ge 2 -a "$optimise" = "yes" ]; then
      if [ $sse = 'yes' ]; then
        if [ $x86_64 = 'yes' ]; then
          #-mfpmath=sse is default for x86_64, no need to specific it
          coptflags="$coptflags -mtune=native"
          foptflags="$foptflags -mtune=native"
        else # i386 needs to be told to use sse prior to using -mfpmath=sse
          coptflags="$coptflags -mtune=native -msse -mfpmath=sse"
          foptflags="$foptflags -mtune=native -msse -mfpmath=sse"
        fi
      fi
      fcreal8="-fdefault-real-8"
    else
      fcreal8="-fdefault-real-8"
    fi

    # Set the dragonegg plugin
    if [ ! -z $dragonegg ]; then
        fflags="-fplugin=$dragonegg $fflags"
        cflags="-fplugin=$dragonegg $cflags"
        cxxflags="-fplugin=$dragonegg $cxxflags"
    fi

    # if gcc <= 4.2, fftw3 is not compiled and pbsa fft solver and rism
    # are disabled.
    if [ "$rism" != 'no' -o -n "$pbsaflag" ]; then
        if ( [ "$cc_version_major" -eq 4 -a "$cc_version_minor" -le 2 ] ) \
                || [ "$cc_version_major" -le 3 ]; then
            echo "Error: RISM and PBSA FFT solver require GNU compiler version 4.3 or higher."
            echo "       Please re-run configure with the '-nofftw3' flag to use this compiler:"
            echo "            `mod_command_args '-rism' '-nofftw3'`"
            exit 1
        fi
    fi

    # gcc 4.1.2 does not support putting allocatable arrays in a Fortran type...
    # so unfortunately file-less prmtop support in the sander API will not work
    # in this case.
    if [ "$cc_version_major" -eq 4 -a "$cc_version_minor" -le 2 ]; then
        fflags="$fflags -DNO_ALLOCATABLES_IN_TYPE"
    fi

    if [ "$pmemd_openmp" = 'yes' -o "$openmp" = 'yes' ]; then
        # OpenMP support requires GNU compiler version 4.2 or higher.
        if ( [ "$cc_version_major" -eq 4 -a "$cc_version_minor" -lt 2 ] ) \
                || [ "$cc_version_major" -lt 4 ]; then
		echo "Error: OpenMP support requires GNU compiler version 4.2 or higher."
		exit 1
	fi

	# Enable OpenMP in PMEMD code.
        if [ "$mpi" = 'yes' ]; then
          foptflags="$foptflags -fopenmp -D_OPENMP_"
        fi
    fi

    if [ "$openmp" = 'yes' ]; then
        # OpenMP support requires GNU compiler version 4.2 or higher.
        if ( [ "$cc_version_major" -eq 4 -a "$cc_version_minor" -lt 2 ] ) \
                || [ "$cc_version_major" -lt 4 ]; then
		echo "Error: OpenMP support requires GNU compiler version 4.2 or higher."
		exit 1
	fi

        if [ ! -z $dragonegg ]; then
            echo "OpenMP is incompatible with dragonegg"
            exit 1
        fi

        omp_flag="-fopenmp -DOPENMP"

        flibs_arch="$flibs_arch -fopenmp"
        flibsf_arch="$flibsf_arch -fopenmp"
        # DRR - Currently MKL is statically linked by default, which appears
        #       only to work for intel compilers.
        if [ -n "$MKL_HOME" ] ; then
          echo "Error: Currently MKL + OpenMP only supported for intel compilers."
          echo "       Please unset MKL_HOME."
          exit 1
        fi
    fi

    if [ "$cygwin" = 'yes' ]; then
        cflags="$cflags -DCYGWIN"
        fppflags="$fppflags -DCYGWIN"
        lm=''
        if [ ! -z $dragonegg ]; then
            echo "Cygwin is not compatible with dragonegg"
            exit 1
        fi
    fi

    freeformat_flag=-ffree-form

    # PMEMD Specifics
    pmemd_fpp_flags='-DPUBFFT'
    # following lines commented out, since pmemd is not GPL:
#   if [ "$has_fftw3" = 'yes' ]; then
#       pmemd_fpp_flags='-DFFTW_FFT'
#   fi
    pmemd_foptflags="$foptflags"
    if [ "$pmemd_openmp" = 'yes' ]; then
        pmemd_foptflags= "$pmemd_foptflags -fopenmp -D_OPENMP_"
    fi
    pmemd_coptflags="$coptflags"
    if [ ! -z $dragonegg ]; then
        pmemd_foptflags="-fplugin=$dragonegg $fflags $pmemd_foptflags"
        pmemd_coptflags="-fplugin=$dragonegg $pmemd_coptflags"
    fi
    if [ "$optimise" = 'no' ]; then
        pmemd_foptflags="-O0 $pmemd_foptflags"
        pmemd_coptflags="-O0 $pmemd_coptflags"
    fi
    if [ "$debug" = 'yes' ]; then
        pmemd_foptflags="-g $pmemd_foptflags"
        pmemd_coptflags="-g $pmemd_coptflags"
    fi
    pmemd_gnu_bug303=-fno-tree-vectorize

    #CUDA Specifics
    if [ "$cuda" = 'yes' ]; then
      pmemd_cu_includes='-I$(CUDA_HOME)/include -IB40C'
      pmemd_cu_defines='-DCUDA'
      pmemd_cu_libs="./cuda/cuda.a -L\$(CUDA_HOME)/lib64 -L\$(CUDA_HOME)/lib -lcurand -lcufft -lcudart $fc_cxx_link_flag"
      if [ "$optimise" = 'no' ]; then
        nvcc="$nvcc -use_fast_math -O0 "
      else
        nvcc="$nvcc -use_fast_math -O3 "
      fi
      if [ "$mpi" = 'yes' ]; then
        mpi_inc=`(mpicc -show 2>&1) | awk 'BEGIN{i=0} {while (i < NF) {if ( substr($i, 1, 2) == "-I" ) {printf("%s ", $i);}; i++;}}'`
        pmemd_cu_includes="$pmemd_cu_includes $mpi_inc"
        pmemd_cu_defines="$pmemd_cu_defines -DMPI -DMPICH_IGNORE_CXX_SEEK"
        pmemd_coptflags="$coptflags -DMPICH_IGNORE_CXX_SEEK"
      fi
    fi
    ;;

#################### icc #######
intel)
    test -z "$pic" && pic="-fpic"
    # following appears to work on Intel compilers version 11,2013..
    flibs_arch="-lifport -lifcore"
    flibsf_arch=
    if [ -z "$CC" ]; then cc=icc; else cc="$CC"; fi
    cflags="$pic $CFLAGS"
    ambercflags=""
    if [ -z "$CXX" ]; then cplusplus=icpc; else cplusplus="$CXX"; fi
    cxxflags="$pic $CXXFLAGS"
    ambercxxflags=""
    if [ -z "$FC" ]; then fc=ifort; else fc="$FC"; fi
    ld="$fc"
    fflags="$pic $FFLAGS"
    freeformat_flag='-FR'
    warnflag='-Wall'
    fwarnflag=''
    # If -noopt has been requested, force lack of optimisation;
    # otherwise, use the default levels. Since cflags, cxxflags
    # and fflags are used everywhere, and *optflags and
    # *nooptflags are not (some parts of Amber and AmberTools use
    # neither *optflags nor *nooptflags), we'll put -O0 in cflags
    # and so forth instead.
    if [ "$optimise" = 'no' ]; then
      cflags="$cflags -O0"
      cnooptflags=""
      coptflags=""
      cxxflags="$cxxflags -O0"
      cxxnooptflags=""
      cxxoptflags="$pic"
      fflags="$fflags -O0"
      fnooptflags=""
      foptflags=""
    else
      cnooptflags=
      coptflags="-ip -O3"  #BPK added -ip here rather than within SSE section
      cxxnooptflags=
      cxxoptflags="$pic -O3"
      fnooptflags="-O0"
      foptflags="-ip -O3"
      fp_flags='-fp-model precise -fp-model source'
    fi

    # Debugging options
    if [ "$debug" = 'yes' ]; then
      cflags="$cflags -g -debug all"
      cxxflags="$cxxflags -g -debug all"
      fflags="$fflags -g -debug all"
    fi
      
    extract_and_emit_compiler_versions '-v'

    if [ "$intel_compiler_flag_mkl" = 'yes' ]; then
        if [ "$cc_version_major" -lt 11 -o "$fc_version_major" -lt 11 ] ; then
            echo "Error: The -mkl family of flags requires compiler version 11 or later !"
            exit 1
        fi
    fi

    #OpenMP support requires Intel compiler version 10.2 or higher.
    if ( [ "$fc_version_major" -eq 10 -a "$fc_version_minor" -lt 2 ] ) \
           || [ "$fc_version_major" -lt 10 ]; then
           echo "Error: OpenMP support requires Intel compiler version 10.2 or higher."
           exit 1
    fi

    # DRR - Add flags necessary for correct compilation with intel version >= 11
    # JMS - This flag actually seems to kill icpc 12.1.0. Removing these flags fixes
    # compilation for Intel v12.1.0 and still works for Intel v11.1.069
    if [ "$cc_version_major" -ge 11 ] ; then
#       cxxflags="-std=c++0x $cxxflags"
#       ambercxxflags="-std=c++0x $ambercxxflags"
        if [ "$static" = 'yes' ]; then
            # -static implies -static-intel, but this redundancy seems more
            # readable than rereading the man page later; srb 11-2014.
            ldflags="$ldflags -static-intel"
        else
            ldflags="$ldflags -shared-intel"
        fi
    fi

    # RISM and PBSA FFT solver require ISO_C_BINDING support.
    if [ "$rism" != 'no' -o -n "$pbsaflag" ]; then
        if [ "$cc_version_major" -le 9 ] ; then
            echo "Error: RISM and PBSA FFT solver require Intel compiler version 10 or higher."
            echo "       Please re-run configure with the '-nofftw3' flag to use this compiler:"
            echo "            `mod_command_args '-rism' '-nofftw3'`"
            exit 1
        fi
    fi

    #mic requires intel compiler suite 2012 or later
    if [ "$mic" = 'yes' -o  "$mic_offload" = 'yes' ]; then
      if [ "$fc_version_major" -lt 12 -o "$cc_version_major" -lt 12 ] ; then
        echo "Error: -mic_native or -mic_offload requires Intel Compiler Suite v2012 or later."
        exit 1
      fi
    fi

    if [ "$openmp" = 'yes' ]; then
        if [ "$fc_version_major" -ge 16 ]; then
             omp_flag="-qopenmp -DOPENMP"
             flibs_arch="$flibs_arch -qopenmp"
             flibsf_arch="$flibsf_arch -qopenmp"
	else
             omp_flag="-openmp -DOPENMP"
             flibs_arch="$flibs_arch -openmp"
             flibsf_arch="$flibsf_arch -openmp"
	fi
      #if [ "$fc_version_major" -lt 11 ] ; then
      #fi
    fi

    #How flags get set for optimization depend on whether we have a MIC processor,
    #  the version of Intel compiler we have, and whether we are cross-compiling
    #  for multiple versions of SSE support.  The following coordinates all of this.
    #  This was done assuming that MIC and SSE are mutually exclusive and that we want
    #  SSE instructions included only when optomize = yes.  Note that use of an
    #  SSE_TYPES specification needs to be given in place of xHost not in addition to.
    #  This observed behavior is not what is reported by the Intel man pages. BPK

    if [ "$optimise" = "yes" -a "$sse" = 'yes' -a "$mic" = 'no' ]; then
      # BPK removed section that modified O1 or O2 to be O3 if optimize was set to yes.
      #     We already begin with the O3 setting so it wasn't needed.
        # For both coptflags and foptflags, use the appropriate settings
        # for the sse flags (compiler version dependent).
        if [ "$cc_version_major" -ge 11 ] ; then
            if [ -n "$SSE_TYPES" ] ; then
                coptflags="$coptflags -ax$SSE_TYPES"
            else
                if [ "$mpi" = "no" ] ; then
                   coptflags="$coptflags -xHost"
                fi
            fi
        else
            coptflags="$coptflags -axSTPW"
        fi

        if [ "$fc_version_major" -ge 11 ] ; then
            if [ -n "$SSE_TYPES" ] ; then
                foptflags="$foptflags -ax$SSE_TYPES"
            else
                if [ "$mpi" = "no" ] ; then
                   foptflags="$foptflags -xHost"
                fi
            fi
        else
            foptflags="$foptflags -axSTPW"
        fi

        flibs_arch="$flibs_arch -lsvml"
        flibsf_arch="$flibsf_arch -lsvml"
    fi

    if [ $cc_version_major -lt 11 ]; then
       ldflags="$ldflags -lsvml"
    fi

    #PMEMD Specifics
    pmemd_fpp_flags='-DPUBFFT'

    if [ "$optimise" = 'no' ]; then
       pmemd_coptflags='-O0'
       pmemd_foptflags='-O0'
    else
       # RCW Removed 10/5/2010 - Causes issues building in parallel since -fast always implies -static.
       #pmemd_foptflags='-fast'
       #pmemd_coptflags='-fast'

       # BPR: Note: -fast implies the use of these flags:
       #
       # Intel 11
       # --------
       # Mac: -ipo -O3 -mdynamic-no-pic -no-prec-div -static -xHost
       # IA-64 Linux: -ipo -O3 -static
       # IA-32/Intel-64 Linux: -ipo -O3 -no-prec-div -static -xHost
       #
       # Intel 10
       # --------
       # Mac: -ipo -O3 -mdynamic-no-pic -no-prec-div -static -xP (ifort),
       #      -ipo -O3 -mdynamic-no-pic -no-prec-div (icc)
       # IA-64 Linux: -ipo -O3 -static
       # IA-32/Intel-64 Linux: -ipo -O3 -no-prec-div -static -xP
       if [ "$is_mac" = 'yes' ]; then
          if [ "$cc_version_major" -ge 11 ]; then
             pmemd_coptflags='-ipo -O3 -mdynamic-no-pic -no-prec-div -xHost'
          else
             pmemd_coptflags='-ipo -O3 -mdynamic-no-pic -no-prec-div'
          fi
          if [ "$fc_version_major" -ge 11 ]; then
             pmemd_foptflags='-ipo -O3 -mdynamic-no-pic -no-prec-div -xHost'
          else
             pmemd_foptflags='-ipo -O3 -mdynamic-no-pic -no-prec-div'
          fi
       else
          if [ "$mic" = 'yes' ]; then
             pmemd_coptflags='-ip -O3 -no-prec-div'
             pmemd_foptflags='-ip -O3 -no-prec-div'
          elif [ "$mic_offload" = 'yes' ]; then
             pmemd_coptflags='-ip -O3 -no-prec-div -xHost'
             pmemd_foptflags='-ip -O3 -no-prec-div -xHost'
          else
             if [ "$cc_version_major" -ge 11 ]; then
                if [ "$sse" = 'yes' ]; then
                   if [ -n "$SSE_TYPES" ] ; then
                      pmemd_coptflags="-ipo -O3 -no-prec-div -ax$SSE_TYPES"
                   else
                      pmemd_coptflags='-ipo -O3 -no-prec-div -xHost'
                   fi
                else
                   pmemd_coptflags='-ipo -O3 -no-prec-div'
                fi
             else
                if [ "$sse" = 'yes' ]; then
                   pmemd_coptflags='-ipo -O3 -no-prec-div -axSTPW'
                else
                   pmemd_coptflags='-ipo -O3 -no-prec-div'
                fi
             fi
             if [ "$fc_version_major" -ge 11 ]; then
                if [ "$sse" = 'yes' ]; then
                   if [ -n "$SSE_TYPES" ] ; then
                      pmemd_foptflags="-ipo -O3 -no-prec-div -ax$SSE_TYPES"
                   else
                      pmemd_foptflags='-ipo -O3 -no-prec-div -xHost'
                   fi
                 else
                   pmemd_foptflags='-ipo -O3 -no-prec-div'
                 fi
             else
                if [ "$sse" = 'yes' ]; then
                   pmemd_foptflags='-ipo -O3 -no-prec-div -axSTPW'
                else
                   pmemd_foptflags='-ipo -O3 -no-prec-div'
                fi
             fi
          fi
       fi
    fi

    #XEON PHI Specifics
    if [ "$mic" = 'yes' ]; then
      pmemd_foptflags="$pmemd_foptflags -mmic"
      pmemd_coptflags="$pmemd_coptflags -mmic"
      #Emil library uses cxxflags so we have to override that as well
      cxxoptflags="$cxxoptflags -mmic"
    fi

    #MIC2 Precision model, optimization flags.
    if [ "$mic2" = 'yes' ]; then
      if [ "$intelmpi" = 'yes' -a "$pmemd_openmp" = 'yes' ]; then 
	 if [ "$fc_version_major" -le 15 -a "$fc_version_major" -ge 13 ]; then
         	pmemd_foptflags="$pmemd_foptflags -DMIC2 -openmp-simd"
         	pmemd_coptflags="$pmemd_coptflags -DMIC2 -openmp-simd"
         elif [ "$fc_version_major" -ge 16 ]; then
         	pmemd_foptflags="$pmemd_foptflags -DMIC2 -qopenmp-simd"
         	pmemd_coptflags="$pmemd_coptflags -DMIC2 -qopenmp-simd"
	 fi
         if [ "$spdp" = 'yes' ]; then
           pmemd_foptflags="$pmemd_foptflags -Dpmemd_SPDP -Dfaster_MIC2"
           pmemd_coptflags="$pmemd_coptflags -Dpmemd_SPDP" 
	   if [ -z "$MKL_HOME" ]; then
             echo "Configure error: Cannot use MIC2_SPDP optimizations without Intel MPI, Intel OpenMP, and Intel MKL on."
	     echo "Set MKL_HOME to the Intel MKL root directory"
	     echo "Then use: ./configure -mic2_spdp -openmp -intelmpi intel"
	     exit 1
	   fi	
	 else
           pmemd_foptflags="$pmemd_foptflags -Dpmemd_DPDP"
           pmemd_coptflags="$pmemd_coptflags -Dpmemd_DPDP" 
         fi
      else
         echo "Configure error: Cannot use MIC2 optimizations without Intel MPI & OpenMP on."
	 echo "Use: ./configure -mic2 -openmp -intelmpi intel"
	 exit 1
      fi
    fi

    if [ "$mic_offload" = 'yes' ]; then
      pmemd_foptflags="$pmemd_foptflags -DMIC_offload -openmp -opt-streaming-cache-evict=0 -fimf-domain-exclusion=15 -align array64byte"
      pmemd_coptflags="$pmemd_coptflags -DMIC_offload -openmp -opt-streaming-cache-evict=0 -fimf-domain-exclusion=15"
      #Emil library uses cxxflags so we have to override that as well
      cxxoptflags="$cxxoptflags -DMIC_offload -opt-streaming-cache-evict=0 -fimf-domain-exclusion=15"
    fi

    # See if we have to turn on debugging
    if [ "$debug" = 'yes' ]; then
        pmemd_foptflags="-g $pmemd_foptflags"
        pmemd_coptflags="-g $pmemd_coptflags"
    fi

    #CUDA Specifics
    if [ "$cuda" = 'yes' ]; then

      # -ipo (multi-file Interprocedural Optimizations optimizations) causes issues with
      #  CUDA c code linking. Leave at a single-file IPO for the moment MJW
      pmemd_coptflags=`echo $pmemd_coptflags | sed -e 's/ipo/ip/g'`
      pmemd_foptflags=`echo $pmemd_foptflags | sed -e 's/ipo/ip/g'`

      pmemd_cu_includes='-I$(CUDA_HOME)/include -IB40C'
      pmemd_cu_defines='-DCUDA'
      pmemd_cu_libs="./cuda/cuda.a -L\$(CUDA_HOME)/lib64 -L\$(CUDA_HOME)/lib -lcurand -lcufft -lcudart $fc_cxx_link_flag"
      if [ "$optimise" = 'yes' ]; then
          nvcc="$nvcc -use_fast_math -O3 "
      else
          nvcc="$nvcc -use_fast_math -O0 "
      fi

      if [ "$mpi" = 'yes' ]; then
          mpi_inc=`(mpicc -show 2>&1) | awk 'BEGIN{i=0} {while (i < NF) {if ( substr($i, 1, 2) == "-I" ) {printf("%s ", $i);}; i++;}}'`
        pmemd_cu_includes="$pmemd_cu_includes $mpi_inc"
        pmemd_cu_defines="$pmemd_cu_defines -DMPI -DMPICH_IGNORE_CXX_SEEK"
        pmemd_coptflags="$pmemd_coptflags -DMPICH_IGNORE_CXX_SEEK"
      fi
    fi

    #Enabling OpenMP optimizations for pmemd.MPI
    if [ "$pmemd_openmp" = 'yes' ]; then
      if [ "$intelmpi" = 'yes' -o "$mpi" = 'yes' -o "$mic_native" = 'yes' -o "$mic2" = 'yes' ]; then
	    if [ "$fc_version_major" -le 15 -a "$fc_version_major" -ge 13 ]; then
          	pmemd_foptflags="$pmemd_foptflags -openmp -D_OPENMP_"
            elif [ "$fc_version_major" -ge 16 ]; then
          	pmemd_foptflags="$pmemd_foptflags -qopenmp -D_OPENMP_"
	    fi
    	if [ "$mic" = 'yes' ]; then
	    if [ "$fc_version_major" -le 15 -a "$fc_version_major" -ge 13 ]; then
      		pmemd_foptflags="$pmemd_foptflags -opt-streaming-cache-evict=0 -fp-model fast=2 -align array64byte -opt-streaming-stores always -opt-ra-region-strategy=default -opt-malloc-options=4 -opt-gather-scatter-unroll=2" 
            elif [ "$fc_version_major" -ge 16 ]; then
      		pmemd_foptflags="$pmemd_foptflags -qopt-streaming-cache-evict=0 -fp-model fast=2 -align array64byte -qopt-streaming-stores always -qopt-ra-region-strategy=default -qopt-malloc-options=4 -qopt-gather-scatter-unroll=2" 
	    fi
	else
	    if [ "$fc_version_major" -le 15 -a "$fc_version_major" -ge 13 ]; then
      		pmemd_foptflags="$pmemd_foptflags -opt-streaming-cache-evict=0 -fp-model fast=2 -align array64byte" 
            elif [ "$fc_version_major" -ge 16 ]; then
      		pmemd_foptflags="$pmemd_foptflags -qopt-streaming-cache-evict=0 -fp-model fast=2 -align array64byte" 
	    fi
	fi
      fi
    fi

    # Intel MPI has name space clashes between C++ bindings and <stdio.h>.
    # This flag is a workaround.
    # See https://software.intel.com/en-us/articles/intel-mpi-library-for-linux-running-list-of-known-issues#A3
    if [ "$intelmpi" = 'yes' ] ; then
      cflags="$cflags -DMPICH_IGNORE_CXX_SEEK"
    fi


    ;;

#################### Portland group #######
pgi)
    test -z "$pic" && pic="-fpic"
    if [ "$intelmpi" = 'yes' ]; then
        echo "Intel MPI requires the intel compilers."
        exit 1
    fi
    flibs_arch="-pgf90libs"
    flibsf_arch=
    if [ -z "$CC" ]; then cc=pgcc; else cc="$CC"; fi
    mtkpp='' # PGI won't compile MTK++; see bug 219.
    cflags="$pic $CFLAGS"
    if [ -z "$CXX" ]; then cplusplus=pgCC; else cplusplus="$CXX"; fi
    cxxflags="$pic $CXXFLAGS"
    fc_cxx_link_flag="-pgcpplibs"
    if [ -z "$FC" ]; then fc=pgf90; else fc="$FC"; fi
    ld="$fc"
    fflags="$pic $FFLAGS"
    freeformat_flag='-Mfree'
    staticflag='-Bstatic'

    # If -noopt has been requested, force lack of optimisation;
    # otherwise, use the default levels. Since cflags, cxxflags
    # and fflags are used everywhere, and *optflags and
    # *nooptflags are not (some parts of Amber and AmberTools use
    # neither *optflags nor *nooptflags), we'll put -O0 in cflags
    # and so forth instead.
    if [ $optimise = 'no' ]; then
        cflags="$cflags -O0"
        cnooptflags=""
        coptflags=""
        cxxflags="$cxxflags -O0"
        cxxnooptflags=""
        cxxoptflags="$pic"
        fflags="$fflags -O0"
        fnooptflags=""
        foptflags=""
        sse='no'
    else
        cnooptflags=""
        coptflags="-O2"
        cxxnooptflags=""
        cxxoptflags="$pic -O2"
        fnooptflags="-O1"
        foptflags="-fast -O3"
    fi

    extract_and_emit_compiler_versions '-V'

    # RISM and PBSA FFT solver require ISO_C_BINDING support.
    if [ "$rism" != 'no' -o -n "$pbsaflag" ]; then
        if ( [ "$cc_version_major" -eq 9 -a "$cc_version_minor" -eq 0 \
                -a "$cc_version_patch" -le 3 ] ) \
                || [ "$cc_version_major" -le 8 ] ; then
            echo "Error: RISM and PBSA FFT solver require PGI compiler version 9.0-4 or higher."
            echo "       Please re-run configure with the '-nofftw3' flag to use this compiler:"
            echo "            `mod_command_args '-rism' '-nofftw3'`"
            exit 1
        fi
    fi

    # 12.6 < PGI version < 13.6 will not compile FFTW3 with SSE
    if [ "$has_fftw3" = 'yes' -a "$sse" = 'yes' ] ; then
        turn_off_sse='no'
        if [ "$cc_version_major" -eq 12 -a "$cc_version_minor" -gt 6 ] ; then
            turn_off_sse='yes'
        elif [ "$cc_version_major" -eq 13 -a "$cc_version_minor" -lt 6 ] ; then
            turn_off_sse='yes'
        fi
        if [ "$turn_off_sse" = 'yes' ] ; then
            echo "Error: PGI versions in-between 12.6 and 13.6 cannot compile FFTW3 with SSE."
            echo "       Re-run configure with either '-nosse' to disable SSE or '-nofftw3' to"
            echo "       disable FFTW3 (and any programs that require FFTW3)."
            exit 1
        fi
    fi

    # Debugging options
    if [ "$debug" = 'yes' ]; then
        cflags="$cflags -g"
        cxxflags="$cxxflags -g"
        fflags="$fflags -g"
    fi

    if [ "$openmp" = 'yes' ]; then
        echo "Warning: OpenMP is not yet well tested for pgi."
        omp_flag="-mp -DOPENMP"
        flibs_arch="$flibs_arch -mp"
    fi

    if [ "$sse" = 'yes' ]; then
        foptflags="$foptflags -fastsse"
    fi

    if [ "$cuda" = "yes" ]; then
        echo "Error: cuda is not available for pgi."
        echo "       Please re-run configure without CUDA flags to use this compiler:"
        echo "            `mod_command_args '-cuda' ''`"
        exit 1
    fi
    #PMEMD Specifics
    pmemd_fpp_flags='-DPUBFFT'
    if [ "$crayxt5" = 'yes' ]; then
        pmemd_foptflags='-O4 -fastsse -Munroll -Mnoframe -Mscalarsse -Mvect=sse -Mcache_align'
    else
        pmemd_foptflags=$foptflags
    fi
    pmemd_coptflags=$coptflags

    if [ "$debug" = 'yes' ]; then
        pmemd_foptflags="-g $pmemd_foptflags"
        pmemd_coptflags="-g $pmemd_coptflags"
    fi

    ;;

#################### cray #######
cray)
    test -z "$pic" && pic="-fpic"
    if [ "$crayxt5" = 'yes' ]; then
       echo "Error: '-crayxt5' flag not compatible with 'cray' compiler target."
       exit 1
    fi
    if [ "$intelmpi" = 'yes' ]; then
      echo "Intel MPI requires the intel compilers."
      exit 1
    fi
    ld='ftn'
    flibs_arch=""
    flibsf_arch=
    cc=cc
    cflags="$pic"
    ambercflags=""
    cplusplus=CC
    cxxflags="$pic"
    ambercxxflags=""
    fc=ftn
    fflags="$pic"
    # The -lstdc++ flag gives lots of duplicate symbol errors with cray
    fc_cxx_link_flag=""

    if [ "$openmp" = 'yes' ]; then
      # DRR - Currently MKL is statically linked by default, which appears
      #       only to work for intel compilers.
      if [ -n "$MKL_HOME" ] ; then
        echo "Error: Currently MKL + OpenMP only supported for intel compilers."
        echo "       Please unset MKL_HOME."
        exit 1
      fi
      omp_flag="-DOPENMP"
      #flibs_arch="$flibs_arch -fopenmp"
      #flibsf_arch="$flibsf_arch -fopenmp
      cray_omp_flag=""
    elif [ "$mpi" = 'no' ]; then
      #Note OMP is required for PMEMD MPI now so leave it on if mpi is true.
      # OMP is enabled by default. Disable.
      cray_omp_flag="-h noomp"
    fi

    # If -noopt has been requested, force lack of optimisation;
    # otherwise, use the default levels. Since cflags, cxxflags
    # and fflags are used everywhere, and *optflags and
    # *nooptflags are not (some parts of Amber and AmberTools use
    # neither *optflags nor *nooptflags), we'll put -O0 in cflags
    # and so forth instead.
    # NOTE: In order for GNU-like defines to work (e.g.
    #       -D_FILE_OFFSET_BITS etc.) cray compilers need '-h gnu'.
    #       Also, the fortran compile requires '-emf' to force
    #       the build of module files with all-lowercase names.
    if [ "$optimise" = 'no' ]; then
      cflags="$cflags -O0 $cray_omp_flag -h gnu"
      cnooptflags=""
      coptflags=""
      cxxflags="$cxxflags -O0 $cray_omp_flag -h gnu"
      cxxnooptflags=""
      cxxoptflags="$pic"
      fflags="$fflags -O0 $cray_omp_flag -emf"
      fnooptflags=""
      foptflags=""
    else
      # cray compilers have equivalent of -O3 on by default
      cflags="$cflags $cray_omp_flag -h gnu"
      cnooptflags=""
      coptflags=""
      cxxflags="$cxxflags $cray_omp_flag -h gnu"
      cxxnooptflags=""
      cxxoptflags="$pic"
      fflags="$fflags $cray_omp_flag -emf"
      fnooptflags=""
      foptflags=""
    fi

    # Debugging options
    if [ "$debug" = 'yes' ]; then
      cflags="$cflags -g"
      cxxflags="$cxxflags -g"
      fflags="$fflags -g"
    fi

    extract_and_emit_compiler_versions '-V'

    # Set alignment of fortran compiler
    fcreal8="-s real64"

    # For now, fftw3 is not compiled and pbsa fft solver and rism are disabled.
    if [ "$rism" != 'no' -o -n "$pbsaflag" ]; then
      echo "Error: RISM and PBSA FFT solver currently not built with cray compilers."
      echo "       Please re-run configure with the '-nofftw3' flag to use this compiler:"
      echo "            `mod_command_args '-rism' '-nofftw3'`"
      exit 1
    fi

    if [ "$cygwin" = 'yes' -o "$windows" = 'yes' ]; then
      echo "Error: cygwin not supported with cray compilers."
      exit 1
    fi

    # The bundled NetCDF will not build with cray compilers. Require external.
    if [ "$bintraj" = 'yes' -a -z "$netcdf_dir" ] ; then
      echo "Error: Bundled NetCDF cannot be used with cray compilers."
      echo "       Please re-run configure with the '--with-netcdf <DIR>' flag to"
      echo "       specify system NetCDF to use. On cray systems you can usually"
      echo "       load the system NetCDF with 'module load cray-netcdf' or"
      echo "       'module load netcdf'."
      exit 1
    fi
    # For some reason if static linking of NetCDF is not forced you end up
    # with lots of missing symbols.
    netcdfstatic='yes'

    # Currently xleap on cray will not build due to errors like
    #/usr/lib64/libX11.a(ClDisplay.o): In function `XCloseDisplay':
    #/usr/src/packages/BUILD/libX11-1.1.5/src/ClDisplay.c:78: undefined reference to `xcb_disconnect'
    if [ "$noX11" = 'false' ] ; then
      echo "Error: Cannot build XLEaP with cray compilers."
      echo "       Please re-run configure with the '-noX11' flag to use this compiler."
      exit 1
    fi

    freeformat_flag="-f free"

    #PMEMD Specifics
    # PMEMD right now with cray requires external FFTW3 library
    cat > conftest.f90 <<EOF
program conftest
include 'fftw3.f'
       write(*,'(a)') 'gotcha!'
end program conftest
EOF
    echo ""
    echo "Checking for external FFTW3 library (required for PMEMD w/ $compiler compilers)"
    $fc $fflags $fnooptflags -o conftest$suffix conftest.f90
    echo "     $fc $fflags $fnooptflags -o conftest$suffix conftest.f90"
    ./conftest$suffix | grep "gotcha!" > /dev/null
    status=$?
    if [ $status -gt 0 ]; then
      echo "Error: FFTW3 library not found."
      echo "       Ensure FFTW3 library can be found by your compiler."
      echo "       On cray systems this can usually be done with 'module load fftw'"
      exit 1
    fi
    echo "OK"
    /bin/rm -f conftest.f90 conftest$objsuffix conftest$suffix

    #pmemd_fpp_flags='-DPUBFFT'
    pmemd_fpp_flags='-DFFTW_FFT'
    pmemd_foptflags="$foptflags $cray_omp_flag -emf"
    pmemd_coptflags="$coptflags  $cray_omp_flag -h gnu"

    if [ "$debug" = 'yes' ]; then
        pmemd_foptflags="-g $pmemd_foptflags"
        pmemd_coptflags="-g $pmemd_coptflags"
    fi

    #CUDA Specifics
    if [ "$cuda" = 'yes' ]; then
      pmemd_cu_includes='-I$(CUDA_HOME)/include -IB40C'
      pmemd_cu_defines='-DCUDA'
      pmemd_cu_libs="./cuda/cuda.a -L\$(CUDA_HOME)/lib64 -L\$(CUDA_HOME)/lib -lcurand -lcufft -lcudart $fc_cxx_link_flag"
      if [ "$optimise" = 'no' ]; then
        nvcc="$nvcc -use_fast_math -O0 "
      else
        nvcc="$nvcc -use_fast_math -O3 "
      fi
      if [ "$mpi" = 'yes' ]; then
        mpi_inc=`(mpicc -show 2>&1) | awk 'BEGIN{i=0} {while (i < NF) {if ( substr($i, 1, 2) == "-I" ) {printf("%s ", $i);}; i++;}}'`
        pmemd_cu_includes="$pmemd_cu_includes $mpi_inc"
        pmemd_cu_defines="$pmemd_cu_defines -DMPI -DMPICH_IGNORE_CXX_SEEK"
        pmemd_coptflags="$coptflags -DMPICH_IGNORE_CXX_SEEK"
      fi
    fi
    ;;

#################### clang ####
clang)
    # Check dragonegg
    if [ ! -z "$dragonegg" ]; then
        if [ ! -f "$dragonegg" ]; then
            echo "Error: Could not find the dragonegg plugin library [$dragonegg]"
            exit 1
        fi
    fi

    if [ "$intelmpi" = 'yes' ]; then
        echo "Intel MPI must be used with the Intel compilers."
        exit 1
    fi

    if [ "$crayxt5" = 'yes' ]; then
       echo "Error: '-crayxt5' flag not compatible with 'clang' compiler target."
       exit 1
    fi

    flibs_arch="-lgfortran -w"
    flibsf_arch=
    if [ -z "$CC" ]; then cc=clang; else cc="$CC"; fi
    cflags="$pic"
    ambercflags=""
    if [ -z "$CXX" ]; then cplusplus=clang++; else cplusplus="$CXX"; fi
    cxxflags="$pic"
    ambercxxflags=""
    if [ -z "$FC" ]; then fc=gfortran; else fc="$FC"; fi
    ld="$fc"
    fflags="$pic"
    warnflag="-Wall -Wno-unused-function"
    fwarnflag="$warnflag"
    # If -noopt has been requested, force lack of optimisation;
    # otherwise, use the default levels. Since cflags, cxxflags
    # and fflags are used everywhere, and *optflags and
    # *nooptflags are not (some parts of Amber and AmberTools use
    # neither *optflags nor *nooptflags), we'll put -O0 in cflags
    # and so forth instead.
    if [ "$optimise" = 'no' ]; then
      cflags="$cflags -O0"
      cnooptflags=""
      coptflags=""
      cxxflags="$cxxflags -O0"
      cxxnooptflags=""
      cxxoptflags="$pic"
      fflags="$fflags -O0"
      fnooptflags=""
      foptflags=""
    else
      cnooptflags=
      coptflags="-O3"
      cxxnooptflags=
      cxxoptflags="$pic -O3"
      fnooptflags="-O0"
      foptflags="-O3 -mtune=native"
    fi

    if [ "$is_mac" = 'yes' ]; then
        fc_cxx_link_flag="-lc++"
        for x in `gfortran -print-search-dirs | grep libraries | \
                  sed -e "s/libraries: =//g" -e "s/:/ /g"`; do
            test -f $x/libgfortran.dylib && break
        done
        flibs_arch="-L$x $flibs_arch"
    fi

    # Debugging options
    if [ "$debug" = 'yes' ]; then
      cflags="$cflags -g"
      cxxflags="$cxxflags -g"
      fflags="$fflags -g"
    fi

    fcreal8="-fdefault-real-8"

    # Set the dragonegg plugin
    test -z $dragonegg || fflags="-fplugin=$dragonegg $fflags"

    if [ "$openmp" = 'yes' ]; then
        echo "OpenMP and clang are not currently compatible"
        exit 1

        # In case clang starts supporting OpenMP soon, keep the code here.
        omp_flag="-fopenmp -DOPENMP"
        flibs_arch="$flibs_arch -fopenmp"
        flibsf_arch="$flibsf_arch -fopenmp"
        # DRR - Currently MKL is statically linked by default, which appears
        #       only to work for intel compilers.
        if [ -n "$MKL_HOME" ] ; then
          echo "Error: Currently MKL + OpenMP only supported for intel compilers."
          echo "       Please unset MKL_HOME."
          exit 1
        fi
    fi

    freeformat_flag=-ffree-form

#WARNING - PMEMD.MPI will likely not work with CLANG because it REQUIRES
#          OpenMP support. It looks like there is an openmp version of 
#          clang but it all horribly confusing as to what version one
#          needs etc - so for now we just leave as is. - Ross.

    #PMEMD Specifics
    pmemd_fpp_flags='-DPUBFFT'
    pmemd_foptflags="$foptflags"
    pmemd_coptflags="$coptflags"
    if [ ! -z $dragonegg ]; then
        pmemd_foptflags="-fplugin=$dragonegg $fflags $pmemd_foptflags"
    fi

    if [ "$debug" = 'yes' ]; then
        pmemd_foptflags="-g $pmemd_foptflags"
        pmemd_coptflags="-g $pmemd_coptflags"
    fi

    #CUDA Specifics
    if [ "$cuda" = 'yes' ]; then
      pmemd_cu_includes='-I$(CUDA_HOME)/include -IB40C'
      pmemd_cu_defines='-DCUDA'
      pmemd_cu_libs="./cuda/cuda.a -L\$(CUDA_HOME)/lib64 -L\$(CUDA_HOME)/lib -lcurand -lcufft -lcudart $fc_cxx_link_flag"
      if [ "$optimise" = 'no' ]; then
        nvcc="$nvcc -use_fast_math -O0 "
      else
        nvcc="$nvcc -use_fast_math -O3 "
      fi
      if [ "$mpi" = 'yes' ]; then
        mpi_inc=`(mpicc -show 2>&1) | awk 'BEGIN{i=0} {while (i < NF) {if ( substr($i, 1, 2) == "-I" ) {printf("%s ", $i);}; i++;}}'`
        pmemd_cu_includes="$pmemd_cu_includes $mpi_inc"
        pmemd_cu_defines="$pmemd_cu_defines -DMPI -DMPICH_IGNORE_CXX_SEEK"
        pmemd_coptflags="$coptflags -DMPICH_IGNORE_CXX_SEEK"
      fi
    fi
    ;;
#################### unknown choice #######
*)
    echo "Error: Architecture/compiler '$compiler' is not supported!"
    echo "       Type './configure -help' for options."
    exit 1
    ;;

esac

test -z "$readline" && cflags="$cflags -DNO_READLINE"

# If -crayxt5 was specified, switch to cc, CC, and ftn compiler wrappers
if [ "$crayxt5" = 'yes' ]; then
    cc="cc"
    cplusplus="CC"
    fc="ftn"
    ld="ftn"
fi

# If -intelmpi is specified, make sure mpiicpc, mpiicc, and mpiifort exist
if [ "$intelmpi" = 'yes' ]; then
    if [ -z "$MPIF90" ]; then
        mpiifort=`which mpiifort 2>/dev/null`
    else
        mpiifort="$MPIF90"
    fi
    if [ -z "$MPICC" ]; then
        mpiicc=`which mpiicc 2>/dev/null`
    else
        mpiicc="$MPICC"
    fi
    if [ -z "$MPICXX" ]; then
        mpiicpc=`which mpiicpc 2>/dev/null`
    else
        mpiicpc="$MPICXX"
    fi
    if [ -z "$mpiifort" -o -z "$mpiicc" -o -z "$mpiicpc" ]; then
        inerr='yes'
        echo "Cannot find Intel MPI compiler wrappers; Intel MPI must not be"
        echo "installed or correctly configured"
        exit 1
    fi
fi

# Link the $AMBERHOME/lib and $AMBERHOME/lib64 directories together if they're
# not already created. Some OSes (like SuSE) will build NetCDF to lib64. This
# will make sure they're all found by the linker
cd ../../
if [ ! -d lib ]; then
    mkdir lib
fi
if [ ! -x lib64 ]; then
    ln -s lib lib64
fi
cd AmberTools/src

#--------------------------------------------------------------------------
#  Configure the MKL and GOTO libraries:
#--------------------------------------------------------------------------

if [ -n "$MKL_HOME" ]; then
    lapack=skip
    blas=skip
    flibs="-larpack "
    flibsf="-larpack "
    mkll="$MKL_HOME/lib/32"
    mkl_processor="32"
    mkl_procstring="ia32"
    mklinterfacelayer='libmkl_intel.a'
    if [ "$x86_64" = 'yes' ]; then
        if [ -d "$MKL_HOME/lib/em64t" ]; then
            mkll="$MKL_HOME/lib/em64t"
            mkl_processor="em64t"
            mkl_procstring="em64t"
        else
            mkll="$MKL_HOME/lib/intel64"
            mkl_processor="intel64"
            mkl_procstring="intel64"
        fi
        # lp64 is 32 bit integers on 64 bit platforms
        mklinterfacelayer='libmkl_intel_lp64.a'
    fi
    echo "Using Intel MKL libraries in $mkll"

    if [ "$gnuld" = 'yes' ]; then
        echo "MKL Version 10 or greater assumed."

        # We always link to the sequential version of MKL since typically
        # one runs an MPI thread for each core.  However, if openmp is
        # specified, for example to turn on SMP diagonalizers for QMMM
        # then we link to the threaded version of MKL and inside the code
        # the number of threads for vector functions etc will be set to
        # 1.  Always link static version of MKL - just easier from an end
        # user perspective.

        # changed by MBJ
        if [ "$openmp" = 'yes' ]; then
          flibs_mkl="-Wl,--start-group $mkll/$mklinterfacelayer $mkll/libmkl_intel_thread.a $mkll/libmkl_core.a -Wl,--end-group -lpthread"
        else
          flibs_mkl="-Wl,--start-group $mkll/$mklinterfacelayer $mkll/libmkl_sequential.a $mkll/libmkl_core.a -Wl,--end-group -lpthread"
        fi
    else
        echo "Non-GNU linker assumed."
        if [ "$openmp" = 'yes' ]; then
          flibs_mkl="-L$mkll $mkll/$mklinterfacelayer $mkll/libmkl_intel_thread.a $mkll/libmkl_core.a -lpthread"
        else
          flibs_mkl="-L$mkll $mkll/$mklinterfacelayer $mkll/libmkl_sequential.a $mkll/libmkl_core.a -lpthread"
        fi
    fi

    # GNU compilers with MKL requires -ldl
    if [ "$compiler" = 'gnu' ]; then
        flibs_mkl="$flibs_mkl -ldl"
    fi
fi

if [ "$gotolib" = 'yes' ]; then
    lapack=skip
    blas=skip
    flibs="-larpack $GOTO -lpthread"
    flibsf="-larpack $GOTO -lpthread"
elif [ "$macAccelerate" = 'yes' ] ; then
    lapack=skip
    blas=skip
    flibs="-larpack "
    flibsf="-larpack "
    flibs_arch="$flibs_arch -framework Accelerate"
    flibsf_arch="$flibsf_arch -framework Accelerate"
elif [ "$intel_compiler_flag_mkl" = 'yes' ]; then
    lapack=skip
    blas=skip
    flibs="-larpack "
    flibsf="-larpack "
    if [ "$openmp" = 'yes' ]; then
        # We always link to the sequential version of MKL since typically
        # ...  See above for the rest of this comment.
        flibs_mkl='-mkl'
    else
        flibs_mkl='-mkl=sequential'
    fi
fi

#--------------------------------------------------------------------------
#  Support platforms without a C <complex.h> by building c9x-complex.
#--------------------------------------------------------------------------

# if [ -r /usr/include/complex.h ]; then
#     c9xcomplex='skip'
# elif [ "$cygwin" = 'yes' -o "$windows" = 'yes' ]; then
#     c9xcomplex='skip'
# else
#     c9xcomplex='libmc.a'
#     cflags="$cflags -DUSE_AMBER_C9XCOMPLEX"
#     pmemd_coptflags="$pmemd_coptflags -DUSE_AMBER_C9XCOMPLEX"
#     flibs_arch="$flibs_arch -lmc"
# fi

#--------------------------------------------------------------------------
#  Support platforms without <sys/dir.h> but with <dirent.h>
#  usually a non-Linux Unix with a non-native compiler.
#--------------------------------------------------------------------------
if [ ! -r /usr/include/sys/dir.h  -a -r /usr/include/dirent.h ]; then
    if [ "$cygwin" != 'yes' ]; then
       cflags="$cflags -DSYSV"
       pmemd_coptflags="$pmemd_coptflags -DSYSV"
    fi
fi

#--------------------------------------------------------------------------
#  Check for large file support:
#--------------------------------------------------------------------------
if [ "$lfs" = 'yes' ]; then
    cflags="$cflags -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE"
    pmemd_coptflags="$pmemd_coptflags -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE"
fi

#--------------------------------------------------------------------------
#  Test various compilers, linking, MPI etc.
#--------------------------------------------------------------------------

#--------------------------------------------------------------------------
#  Test if the C compiler works:
#--------------------------------------------------------------------------

cat <<EOF >testp.c
#include <stdio.h>
int main()
{
   printf( "testing a C program\n" );
}
EOF

echo ""
echo "Testing the $cc compiler:"
echo "     $cc $cflags $cnooptflags -o testp$suffix testp.c"
$cc $cflags $cnooptflags -o testp$suffix testp.c
$wine ./testp$suffix | grep "testing a C program" > /dev/null
status=$?

if [ $status -gt 0 ]; then
    echo "Error: Unable to compile a C program using $cc $cflags $cnooptflags"
    echo "       Please check your compiler settings or configure flags."
    exit 1
fi
echo "OK"
/bin/rm -f testp.c testp$objsuffix testp$suffix

#--------------------------------------------------------------------------
#  Test if the C++ compiler works:
#--------------------------------------------------------------------------
echo ""
echo "Testing the $cplusplus compiler:"
echo "     $cplusplus $cxxflags -o testp$suffix testp.cpp"
  cat > testp.cpp <<EOF
#include <cstdio>
int main() { printf("Testing\n"); return 0; }
EOF
$cplusplus $cxxflags -o testp$suffix testp.cpp
$wine ./testp$suffix | grep "Testing" > /dev/null
status=$?
if [ $status -gt 0 ] ; then
  echo "Error: Unable to compile a C program using $cplusplus $cxxflags"
  echo "       Please check your compiler settings or configure flags."
    exit 1
fi
echo "OK"
/bin/rm -f testp.cpp testp$objsuffix testp$suffix

#--------------------------------------------------------------------------
#  Test if the Fortran compiler works:
#--------------------------------------------------------------------------

cat <<EOF >testp.f
      program testf
      write(6,*) 'testing a Fortran program'
      end program testf
EOF

echo ""
echo "Testing the $fc compiler:"
echo "     $fc $fflags $fnooptflags -o testp$suffix testp.f $extra_ftest"
$fc $fflags $fnooptflags -o testp$suffix testp.f $extra_ftest
$wine ./testp$suffix | grep "testing a Fortran program" > /dev/null
status=$?

if [ $status -gt 0 ]; then
    echo "Error: Unable to compile a Fortran program using $fc $fflags $fnooptflags"
    echo "       Please check your compiler settings and configure flags."
    exit 1
fi
echo "OK"
/bin/rm -f testp.f testp$objsuffix testp$suffix

#--------------------------------------------------------------------------
# Test mixed C/Fortran compilation.
#--------------------------------------------------------------------------
cat > testp.c <<EOF
#include <stdio.h>
extern void hello_();
int main(int argc, char **argv) {
  printf("Hello from c.\n");
  hello_();
  return 0;
}
EOF
cat > testp.f <<EOF
      subroutine hello
      print *,"Hello from f."
      end
EOF
echo ""
echo "Testing mixed C/Fortran compilation:"
echo "     $cc $cflags $cnooptflags -c -o testp.c$objsuffix testp.c"
$cc $cflags $cnooptflags -c -o testp.c$objsuffix testp.c
echo "     $fc $fflags $fnooptflags -c -o testp.f$objsuffix testp.f"
$fc $fflags $fnooptflags -c -o testp.f$objsuffix testp.f
echo "     $cc $cflags -o testp$suffix testp.c$objsuffix testp.f$objsuffix $flibs_arch $extra_ftest"
$cc $cflags -o testp$suffix testp.c$objsuffix testp.f$objsuffix $flibs_arch $extra_ftest
$wine ./testp$suffix | grep " Hello from f." > /dev/null
status=$?

if [ $status -gt 0 ]; then
    echo "Error: Unable to compile mixed C/Fortran code."
    echo "       Please check your compiler settings and configure flags."
    exit 1
fi
echo "OK"
/bin/rm -f testp.c testp.f testp.c$objsuffix testp.f$objsuffix testp$suffix

#--------------------------------------------------------------------------
# Determine if machine is 32 bit or 64 bit
#
# We have the x86_64 flag which tries to detect this based on uname but
# this will not catch everything. Especially if someone is using a 32 bit
# compatibility compiler on a x86_64 machine.
#--------------------------------------------------------------------------
cat > test_pointer_size.c <<EOF
#include <stdio.h>

int main()
{
          printf ("%d\n", (int )sizeof(void*));
          return 0;
}
EOF
echo ""
echo "Testing pointer size:"
echo "     $cc $cflags $cnooptflags -o test_pointer_size$suffix test_pointer_size.c"
$cc $cflags $cnooptflags -o test_pointer_size$suffix test_pointer_size.c
$wine ./test_pointer_size$suffix | grep "4" > /dev/null
status=$?

if [ $status -eq 0 ]; then
      #Align doubles on 32 bit machines. Needed for cuda to work on 32 bit machine.
      echo "Detected 32 bit operating system."
      pmemd_coptflags="$pmemd_coptflags -malign-double"
else
      echo "Detected 64 bit operating system."
fi
/bin/rm -f test_pointer_size.c test_pointer_size$suffix

#--------------------------------------------------------------------------
#  Test if lex/flex is available and works
#--------------------------------------------------------------------------

  echo ""
  printf "Testing $lex:"
  cat <<EOF >testp.l
%{


%}
%%

ddm[=\ ][^\ \n\t,]+         { ECHO; ddm = 1;}

%%
EOF

$lex -t testp.l | grep ddm  > /dev/null
status=$?

if [ $status -gt 0 ]; then
    echo ""
    echo "Error: Unable to run $lex; this is required for NAB and antechamber."
    echo "       Please check your PATH, or install the program."
    echo ""
    exit 1
else
    echo " OK"
fi
/bin/rm -f testp.l

#--------------------------------------------------------------------------
#  Configure NetCDF
#--------------------------------------------------------------------------
if [ "$bintraj" = 'yes' ]; then
  printf "\nChecking NetCDF...\n"
  netcdf_flag='-lnetcdf'
  cflags="$cflags -DBINTRAJ"
  pmemd_coptflags="$pmemd_coptflags -DBINTRAJ"
  fppflags="$fppflags -DBINTRAJ"
  if [ "$netcdf_dir" = '' ]; then
    # Use bundled NetCDF library.
    if [ "$netcdfstatic" != 'no' ] ; then
      echo "Error: -netcdfstatic requires an external NetCDF specified via"
      echo "       the --with-netcdf option."
      exit 1
    fi
    # Initially set full paths for use with test_netcdf_compile.
    printf "\tUsing bundled NetCDF library.\n"
    netcdfflagc="$AMBERHOME/lib/libnetcdf.a"               # For C
    netcdfflagf="$AMBERHOME/lib/libnetcdff.a $netcdfflagc" # For Fortran
    netcdfinc="-I$AMBERHOME/include"
    netcdf="$AMBERHOME/include/netcdf.mod"
    # If any file not yet present, trigger the build.
    if [ ! -e "$netcdf" -o ! -e "$netcdfflagc" -o ! -e "$AMBERHOME/lib/libnetcdff.a" ] ; then
      build_netcdf='build_netcdf'
      printf "\tStarting NetCDF build.\n"
    else
      # Test compilation. If it fails, assume NetCDF needs to be rebuilt
      test_netcdf_compile
      if [ $? -gt 0 ] ; then
        build_netcdf='build_netcdf'
        printf "\tNetCDF must be rebuilt.\n"
        /bin/rm $AMBERHOME/lib/libnetcdf* $AMBERHOME/include/netcdf.*
      fi
    fi
    if [ ! -z "$build_netcdf" ] ; then
      # NetCDF C configure/build
      cd netcdf-4.3.0
      printf "\tConfiguring NetCDF C interface (may be time-consuming)...\n"
      make clean > /dev/null 2>&1
      if [ "$mic" = 'yes' ]; then
        ./configure --host=x86_64-k1om-linux --build=x86_64-unknown-linux \
                    CC="$cc -mmic" CFLAGS="$cflags $cnooptflags" LDFLAGS="$ldflags -mmic" \
                    --prefix=$AMBERHOME --disable-netcdf-4 --disable-dap \
                    > ../netcdf_config.log 2>&1
      else
        ./configure CC="$cc" CFLAGS="$cflags $cnooptflags" LDFLAGS="$ldflags" \
                    --prefix=$AMBERHOME --disable-netcdf-4 --disable-dap $hostflag \
                    > ../netcdf_config.log 2>&1
      fi
      ncerror=$?
      if [ $ncerror -gt 0 ]; then
          echo "Error: NetCDF C configure returned $ncerror"
          echo "       NetCDF configure failed!  Check the netcdf_config.log file"
          echo "       in the $AMBERHOME/AmberTools/src directory."
          exit 1
      fi
      # The NetCDF C interface MUST be present prior to configuring the
      # Fortran interface, so build it now.
      printf "\tCompiling the NetCDF C interface (may be time-consuming)...\n"
      make install > netcdf.c.compile.log 2>&1
      if [ $? -ne 0 ]; then
        echo "Error: NetCDF C compile failed."
        echo "       Check $AMBERHOME/AmberTools/src/netcdf-4.3.0/netcdf.c.compile.log"
        echo "       for errors."
        exit 1
      fi
      # Because of some strange error in the NetCDF C build framework on cygwin
      # the NetCDF utilities get built but not moved to the bin directory. If
      # this happens try to at least move ncdump since some tests use it.
      if [ "$cygwin" = 'yes' ] ; then
        if [ ! -f "$AMBERHOME/bin/ncdump.exe" ] ; then
          if [ -f "ncdump/.libs/ncdump.exe" ] ; then
            /bin/mv ncdump/.libs/ncdump.exe $AMBERHOME/bin/
          else
            echo "Warning: 'ncdump' program not found. Some tests may fail if 'ncdump' not present."
          fi
        fi
      fi
      # NetCDF Fortran configure/build
      cd ../netcdf-fortran-4.2
      # The NetCDF Fortran config script will need access to the C library.
      export LD_LIBRARY_PATH="$AMBERHOME/lib:$LD_LIBRARY_PATH"
      printf "\tConfiguring NetCDF Fortran interface (may be time-consuming)...\n"
      make clean > /dev/null 2>&1
      if [ "$mic" = 'yes' ]; then
        ./configure --host=x86_64-k1om-linux --build=x86_64-unknown-linux \
                     CC="$cc" CFLAGS="$cflags $cnooptflags -mmic" \
                     LDFLAGS="-L$AMBERHOME/lib $ldflags -mmic" \
                     CPPFLAGS="-I$AMBERHOME/include" \
                     FC="$fc" FCFLAGS="$fflags $foptflags -mmic" \
                     F77="$fc" FFLAGS="$fflags $foptflags -mmic" \
                     --prefix=$AMBERHOME >> ../netcdf_config.log 2>&1

        cd fortran
        cp nfconfig.in nfconfig.inc-orig
        sed s/"#undef NF_INT1_IS_C_SIGNED_CHAR"/"#define NF_INT1_IS_C_SIGNED_CHAR 1"/ nfconfig.inc-orig >nfconfig.tmp1
        sed s/"#undef NF_INT2_IS_C_SHORT"/"#define NF_INT2_IS_C_SHORT 1"/ nfconfig.tmp1 >nfconfig.tmp2
        sed s/"#undef NF_INT_IS_C_INT"/"#define NF_INT_IS_C_INT 1"/ nfconfig.tmp2 >nfconfig.tmp3
        sed s/"#undef NF_REAL_IS_C_FLOAT"/"#define NF_REAL_IS_C_FLOAT 1"/ nfconfig.tmp3 >nfconfig.tmp4
        sed s/"#undef NF_DOUBLEPRECISION_IS_C_DOUBLE"/"#define NF_DOUBLEPRECISION_IS_C_DOUBLE 1"/ nfconfig.tmp4 >nfconfig.in
        cp  nfconfig.in nfconfig.inc
        cd ..
      else
        ./configure  CC="$cc" CFLAGS="$cflags $cnooptflags" \
                     LDFLAGS="-L$AMBERHOME/lib $ldflags" \
                     CPPFLAGS="-I$AMBERHOME/include" \
                     FC="$fc" FCFLAGS="$fflags $foptflags" \
                     F77="$fc" FFLAGS="$fflags $foptflags" --enable-shared \
                     --prefix=$AMBERHOME $hostflag >> ../netcdf_config.log 2>&1
      fi
      ncerror=$?
      if [ $ncerror -gt 0 ]; then
          echo "Error: NetCDF Fortran configure returned $ncerror"
          echo "       NetCDF configure failed!  Check the netcdf_config.log file"
          echo "       in the $AMBERHOME/AmberTools/src directory."
          exit 1
      fi
      # Build the fortran interface
      printf "\tCompiling the NetCDF Fortran interface (may be time-consuming)...\n"
      make install > netcdf.fortran.compile.log 2>&1
      if [ $? -ne 0 ]; then
        echo "Error: NetCDF Fortran compile failed."
        echo "       Check $AMBERHOME/AmberTools/src/netcdf-fortran-4.2/netcdf.fortran.compile.log"
        echo "       for errors."
        exit 1
      fi
      cd ../
      if [ "$mic" = 'no' ]; then
        # Test compilation.
        test_netcdf_compile verbose
        if [ $? -gt 0 ] ; then
          echo "Error: NetCDF build failed."
          exit 1
        fi
      fi
      echo "NetCDF build succeeded."
    else
      printf "\tUsing existing NetCDF in '$AMBERHOME'\n"
    fi
    # Restore relative paths for config.h
    netcdfflagc="\$(LIBDIR)/libnetcdf.a"               # for C
    netcdfflagf="\$(LIBDIR)/libnetcdff.a $netcdfflagc" # for Fortran
    netcdfinc="-I\$(INCDIR)"
    netcdf="\$(INCDIR)/netcdf.mod"
  else
    # A NetCDF directory was specified. Check that library exists and compiles
    printf "\tUsing external NetCDF in '$netcdf_dir'\n"
    netcdfinc="-I"$netcdf_dir"/include"
    if [ "${netcdf_dir}" != '/usr' -a "$netcdf_dir" != '/usr/' ]; then
        netcdf_flag="-L${netcdf_dir}/lib $netcdf_flag"
    fi
    netcdf=$netcdf_dir"/include/netcdf.mod"
    if [ "$netcdfstatic" = 'no' ] ; then
      if [ "${netcdf_dir}" != '/usr' -a "${netcdf_dir}" != '/usr/' ]; then
          netcdfflagc="-L${netcdf_dir}/lib -lnetcdf"
          netcdfflagf="-L${netcdf_dir}/lib -lnetcdff -lnetcdf"
      else
          netcdfflagc="-lnetcdf"
          netcdfflagf="-lnetcdff -lnetcdf"
      fi
    else # Force static linking to netcdf
      printf "\tForcing static linking to external NetCDF\n"
      netcdfflagc=$netcdf_dir"/lib/libnetcdf.a"
      if [ ! -e "$netcdfflagc" ]; then
        echo "Error: '$netcdfflagc' not found."
        exit 1
      fi
      netcdfflagf=$netcdf_dir"/lib/libnetcdff.a"
      if [ ! -e "$netcdfflagf" ]; then
        echo "Error: '$netcdfflagf' not found."
        exit 1
      fi
      netcdfflagf="$netcdfflagf $netcdfflagc"
    fi
    # Test netcdf compilation
    test_netcdf_compile verbose
    if [ $? -gt 0 ]; then
      echo "Error: Could not compile using NetCDF in '$netcdf_dir'"
      exit 1
    fi
    echo "OK"
  fi
else
    netcdf=''
    netcdfflagf=''
    netcdfflagc=''
    netcdfinc=''
fi

#------------------------------------------------------------------------------
#  Set up the static flags:
#------------------------------------------------------------------------------
if [ "$static" = 'yes' ]; then
    flibs="$flibs $staticflag"
    ldflags="$ldflags $staticflag"
fi

#--------------------------------------------------------------------------
#  Check for Zlib and Bzlib (currently only cpptraj)
#--------------------------------------------------------------------------
#   Zlib
cat > testp.c <<EOF
#include <stdio.h>
#include "zlib.h"
int main() { gzFile fp; printf( "testing a C program\n" ); return 0; }
EOF
echo ""
echo "Checking for zlib: "
echo "     $cc $cflags $ldflags -lz -o testp$suffix testp.c"
$cc $AMBERBUILDFLAGS $cflags $ldflags -lz -o testp$suffix testp.c
status=$?
if [ -f "testp$suffix" -a -z "$wine" ] ; then
  $wine ./testp | grep "testing a C program" > /dev/null
  status=$?
fi
if [ $status -gt 0 ]; then
    echo "zlib Not found; this feature will be disabled."
    zlib=''
else
    echo "OK"
    zlib='-lz'
    cflags="$cflags -DHASGZ"
fi
/bin/rm -f testp.c testp$objsuffix testp$suffix

#   Bzlib
cat >testp.c <<EOF
#include <stdio.h>
#include "bzlib.h"
int main()
{ BZFILE *infile; printf( "testing a C program\n" ); return 0; }
EOF
echo ""
echo "Checking for libbz2: "
echo "     $cc $cflags $ldflags -lbz2 -o testp$suffix testp.c"
$cc $AMBERBUILDFLAGS $cflags $ldflags -lbz2 -o testp$suffix testp.c
status=$?
if [ -f "testp$suffix" -a -z "$wine" ] ; then
  $wine ./testp | grep "testing a C program" > /dev/null
  status=$?
fi
if [ $status -gt 0 ]; then
    echo "libbz2 Not found; this feature will be disabled."
    bzlib=''
else
    echo "OK"
    bzlib='-lbz2'
    cflags="$cflags -DHASBZ2"
fi
/bin/rm -f testp.c testp$objsuffix testp$suffix

#-------------------------------------------------------------------------------
#  Set RISM & NAB flags that depend on MPI/serial build
#-------------------------------------------------------------------------------
if [ "$cygwin" = 'yes' ]; then
    rism='no'
fi
if [ "$mpi" = "yes" ]; then
    #NAB
    nablibsff="-lsff_mpi"

    #RISM
    #preprocessor flag for RISM in NAB
    rismsff=""
    #RISM library for NAB to link to
    nablibrism=""
    #name and path of the amber_rism_interface object to link to
    sff_rism_interface=""
    #run the NAB-RISM and 1D-RISM tests
    testrismsff=""

    #preprocessor flag for RISM in SANDER
    rismsander=""
    #RISM library for SANDER to link to
    flibs_rismsander=""
    #name and path of the amber_rism_interface object to link to
    sander_rism_interface=""
    if [ "$rism" = "default" ];then
        rism='no'
    elif [ "$rism" = "yes" ]; then
        #turn on sander/RISM w/ FFTW
        if [ -z "$XTRA_FLIBS" ]; then
            if [ `false` ]; then
                # This is the old code for determining XTRA_FLIBS, based on
                # figuring out what worked for each MPI vendor... Disable this
                # in favor of a hopefully more general approach
                # try to determine the MPI vendor to automatically set
                # XTRA_FLIBS. We currently know what to do with OpenMPI and
                # MPICH. Others may be added later
                printf "\nDetermining MPI vendor... "
                mpi_vendor=`mpiexec -version 2>&1 | head -1 | cut -d' ' -f1,2`
                #echo "|||$mpi_vendor|||"
                if [ "$mpi_vendor" = "mpiexec (OpenRTE)" ]; then
                    export XTRA_FLIBS="-lmpi_usempif08 -lmpi_mpifh"
                    echo "Found OpenMPI. Setting XTRA_FLIBS=$XTRA_FLIBS"
                elif [ "$mpi_vendor" = "HYDRA build" ]; then
                    export XTRA_FLIBS=-lfmpich
                    echo "Found MPICH. Setting XTRA_FLIBS=$XTRA_FLIBS"
                else
                    echo
                    echo "Error: MPI vendor auto detect failed. Could not set XTRA_FLIBS."
                    echo "       To compile 3D-RISM support in MPI NAB you must set"
                    echo "       XTRA_FLIBS to the name of the Fortran MPI libraries for"
                    echo "       your MPI distribution. For example:"
                    echo "       OpenMPI:"
                    echo "           export XTRA_FLIBS=-lmpi_f77"
                    echo "       MPICH:"
                    echo "           export XTRA_FLIBS=-lfmpich"
                    echo
                    echo "       To omit 3D-RISM support, re-configure with the -norism flag:"
                    echo "            `mod_command_args '-rism' '-norism'`"
                    exit 1
                fi
            else
                XTRA_FLIBS=`(mpif90 -show 2>&1) | awk 'BEGIN{i=0} {while (i < NF) {if ( substr($i, 1, 2) == "-l" ) {printf("%s ", $i);}; i++;}}'`
                echo "Setting XTRA_FLIBS=\"$XTRA_FLIBS\" from mpif90 flags"
            fi
        else
            echo
            echo "XTRA_FLIBS set: $XTRA_FLIBS"
        fi
        rismsff="-DRISMSFF"
        nablibrism="-lrism_mpi"
        sff_rism_interface="../rism/amber_rism_interface.NAB.o"
        testrismsff="testrism"
        rismsander="-DRISMSANDER"
        flibs_rismsander="-lrism_mpi"
        sander_rism_interface="../rism/amber_rism_interface.SANDER.o"
    fi
else

  #NAB
    nablibsff="-lsff"

  #RISM
    rismsff="-DRISMSFF"
    nablibrism="-lrism"
    sff_rism_interface="../rism/amber_rism_interface.NAB.o"
    testrismsff="testrism"
    flibs_rismsander="-lrism"
    rismsander="-DRISMSANDER"
    sander_rism_interface="../rism/amber_rism_interface.SANDER.o"
    if [ "$rism" = "default" ]; then
        rism='yes'
    elif [ "$rism" = 'no' ]; then
        rismsff=""
        nablibrism=""
        sff_rism_interface=""
        testrismsff=""
        rismsander=""
        flibs_rismsander=""
        sander_rism_interface=""
    fi
    if [ -n "$XTRA_FLIBS" ]; then
        echo
        echo "Error: Please unset XTRA_FLIBS for serial compilation."
        echo "       For example:"
        echo "       export -n XTRA_FLIBS="
        exit 1
    fi
fi

#--------------------------------------------------------------------------
#  Configure fftw-3.3:
#--------------------------------------------------------------------------
# fftw cannot be used by pmemd since pmemd is not GPL.
# But the MKL FFT via the MKL FFTW interface can be used by pmemd.
if [ "$compiler" = "intel" ]; then
    if [ -n "$MKL_HOME" -o "$intel_compiler_flag_mkl" = 'yes' ]; then
        echo
        echo "Configuring PMEMD for the MKL FFTW..."
        echo
        if [ -n "$MKL_HOME" ]; then
            echo "     MKL_HOME set to" "$MKL_HOME"
            echo $(mkdir $AMBERHOME/include)
            echo $(cp $MKL_HOME/include/fftw/fftw3.f $AMBERHOME/include)
        fi
        if [ "$intelmpi" = "yes" ]; then
            pmemd_fpp_flags="$pmemd_fppflags -DFFTW_FFT -DMKL_FFTW_FFT "
            pmemd_coptflags="$pmemd_coptflags -DFFTW_FFT " # it would be best if we had a cflags var
        fi
    fi
#GNU compilers currently not working for MKL
#   elif [ "$compiler" = "gnu" ]; then
#    if [ -n "$MKLROOT" ]; then
#      echo
#      echo "Configuring PMEMD for the MKL FFTW..."
#      echo
#      echo "     MKLROOT set to" "$MKLROOT"
#      pmemd_foptflags="$pmemd_foptflags -fopenmp -m64 -I$MKLROOT/include"
#      pmemd_coptflags="$pmemd_coptflags -fopenmp -m64 -I$MKLROOT/include"
#      pmemd_flibs_mkl="-L$MKLROOT/lib/intel64 -lmkl_gf_lp64 -lmkl_core -lmkl_gnu_thread -ldl -lpthread -lm"
#    fi
fi

if [ "$has_fftw3" = 'yes' ]; then
    echo
    echo "Configuring fftw-3.3 (may be time-consuming)..."
    echo
    enable_mpi=""
    enable_debug=""
    enable_sse="--enable-sse=no --enable-sse2=no --enable-avx=no"
    mpicc=""
    if [ "$mpi" = "yes" ]; then
        enable_mpi="--enable-mpi=yes"
    fi
    if [ "$intelmpi" = "yes" ]; then
        mpicc="MPICC=mpiicc"
    fi
    if [ "$debug" = "yes" ]; then
        enable_debug="--enable-debug=yes --enable-debug-malloc=yes --enable-debug-alignment=yes"
    fi
    if [ "$sse" = "yes" ]; then
        enable_sse="--enable-sse2=yes" # --enable-avx=yes"
    fi
    if [ "$mic" = 'yes' ]; then
      echo "   --configuring for mic (native mode)..."
      echo
      cd fftw-3.3 && \
      ./configure --prefix=$AMBERHOME --libdir=$AMBERHOME/lib \
        --enable-static --enable-shared --host=x86_64-k1om-linux \
      --build=x86_64-unknown-linux \
       $enable_mpi $mpicc $enable_debug \
        CC="$cc -mmic" CFLAGS="$cflags $coptflags " \
        F77="$fc -mmic" FFLAGS="$fflags $foptflags " \
        FLIBS="$flibs_arch" \
        > ../fftw3_config.log 2>&1
      ncerror=$?
    else
      cd fftw-3.3 && \
        ./configure --prefix=$AMBERHOME --libdir=$AMBERHOME/lib \
        --enable-static --enable-shared \
        $enable_mpi $mpicc $enable_debug $enable_sse\
        CC="$cc" CFLAGS="$cflags $coptflags" \
        F77="$fc" FFLAGS="$fflags $foptflags" \
        FLIBS="$flibs_arch" \
        > ../fftw3_config.log 2>&1
      ncerror=$?
    fi
    if [ $ncerror -gt 0 ]; then
        echo "Error: FFTW configure returned $ncerror"
        echo "       FFTW configure failed! Check the fftw3_config.log file"
        echo "       in the $AMBERHOME/AmberTools/src directory."
        exit 1
    else
        echo "    fftw-3.3 configure succeeded."
    fi
    cd ..
    flibs_fftw3="-lfftw3"
    fftw3="\$(LIBDIR)/libfftw3.a"
    if [ "$mpi" = 'yes' -a "$intelmpi" = 'no' ]; then
        flibs_fftw3="-lfftw3_mpi $flibs_fftw3"
        fftw3="\$(LIBDIR)/libfftw3_mpi.a \$(LIBDIR)/libfftw3.a"
    fi
elif [ "$mdgx" = 'yes' ]; then
    echo
    echo "Configuring fftw-3.3 for mdgx (may be time-consuming)..."
    echo
    enable_mpi=""
    enable_debug=""
    enable_sse="--enable-sse=no --enable-sse2=no --enable-avx=no"
    if [ "$debug" = "yes" ]; then
        enable_debug="--enable-debug=yes --enable-debug-malloc=yes --enable-debug-alignment=yes"
    fi
    if [ "$sse" = "yes" ]; then
        enable_sse="--enable-sse2=yes" # --enable-avx=yes"
    fi
    cd fftw-3.3 && \
        ./configure --prefix=$AMBERHOME --libdir=$AMBERHOME/lib \
        --enable-static --enable-shared --disable-fortran \
        $enable_debug $enable_sse\
        CC="$cc" CFLAGS="$cflags $coptflags" \
        > ../fftw3_config.log 2>&1
    ncerror=$?
    if [ $ncerror -gt 0 ]; then
        echo "Error: FFTW configure returned $ncerror"
        echo "       FFTW configure failed! Check the fftw3_config.log file"
        echo "       in the $AMBERHOME/AmberTools/src directory."
        exit 1
    else
        echo "    fftw-3.3 configure succeeded."
    fi
    cd ..
    flibs_fftw3="-lfftw3"
    fftw3="\$(LIBDIR)/libfftw3.a"
else
    echo ""
    echo "Skipping configuration of FFTW3"
    fftw3=""
fi
#--------------------------------------------------------------------------
#  Enable parallel mdgx. If mdgx is no from fftw3, leave it at no.
#--------------------------------------------------------------------------
if [ "$mpi" = 'yes' -a "$mdgx" = 'yes' ]; then
    mdgx='parallel'
fi

#--------------------------------------------------------------------------
#  Configure XBLAS
#--------------------------------------------------------------------------
if [ "$rism" = "yes" ]; then
    echo
    echo "Configuring XBLAS (may be time-consuming)..."
    echo
    xblas="\$(LIBDIR)/libxblas-amb.a"
    cd xblas
    CC="$cc" FC="$fc" CFLAGS="$cflags $coptflags" ./configure --prefix="$AMBERHOME/lib" > ../xblas_config.log 2>&1
    ncerror=$?
    if [ $ncerror -gt 0 ]; then
        echo "Error: XBLAS configure returned $ncerror"
        echo "       XBLAS configure failed!  Check the xblas_config.log file"
        echo "       in the $AMBERHOME/AmberTools/src directory."
        exit 1
    else
        echo "    XBLAS configure succeeded."
    fi
    flibsf=$flibsf" -lxblas-amb"
    cd ..
else
    xblas=""
fi

#--------------------------------------------------------------------------
#  Configure mtkpp:
#--------------------------------------------------------------------------
if [ "$mtkpp" = 'install_mtkpp' ]; then

  boostDir=$PWD/boost-1.38.0
  cd mtkpp
  echo
  echo "Configuring MTK++ (may be time-consuming)..."
  echo
  if [ "$is_mac" = 'yes' ]; then
    ./configure CXX="$cplusplus" CC="$cc" QTDIR="" \
      CFLAGS="$cflags" \
      CXXFLAGS="$cxxflags" \
      --prefix=$AMBERHOME \
      --includedir=$AMBERHOME/include/mtkpp \
      --disable-shared \
      --with-boost="${boostDir}" > ../mtkpp_config.log 2>&1
  else
    ./configure CXX="$cplusplus" CC="$cc" QTDIR="" \
       CFLAGS="$cflags" \
       CXXFLAGS="$cxxflags" \
       --disable-shared --enable-static="yes" \
       --prefix=$AMBERHOME \
       --includedir=$AMBERHOME/include/mtkpp \
       --with-boost="${boostDir}" > ../mtkpp_config.log 2>&1
  fi

  mtkerror=$?
  if [ $mtkerror -gt 0 ]; then
    echo "    Warning: MTK++ configure returned $mtkerror"
    echo "    MTK++ configure failed!  Check the mtkpp_config.log file"
    echo "    in the $AMBERHOME/AmberTools/src directory."
    echo "    MTK++ will not be built alongside AmberTools."
    mtkpp=''
  else
    echo "    MTK++-0.2.0 configure succeeded."
  fi
  cd ..
fi

# Configure PUPIL support
pupillibs="-lm -lc -L\${PUPIL_PATH}/lib -lPUPIL -lPUPILBlind"
if [ "$is_mac" = 'no' ]; then
    pupillibs="-lrt $pupillibs"
fi

#------------------------------------------------------------------------------
#  Set up the mpi compilers:
#------------------------------------------------------------------------------
if [ "$mpi" = 'yes' ]; then
  if [ "$crayxt5" = 'yes' -o "$compiler" = 'cray' ]; then
      cc="cc"
      fc="ftn"
      cplusplus="CC"
  elif [ "$intelmpi" = 'yes' ]; then
      if [ -z "$MPICC" ]; then cc="mpiicc"; else cc="$MPICC"; fi
      if [ -z "$MPICXX" ]; then cplusplus="mpiicpc"; else cplusplus="$MPICXX"; fi
      if [ -z "$MPIF90" ]; then fc="mpiifort"; else fc="$MPIF90"; fi
  else
      if [ -z "$MPICC" ]; then cc="mpicc"; else cc="$MPICC"; fi
      if [ -z "$MPICXX" ]; then cplusplus="mpicxx"; else cplusplus="$MPICXX"; fi
      if [ -z "$MPIF90" ]; then fc="mpif90"; else fc="$MPIF90"; fi
  fi
  ld="$fc"
  mpi_flag="-DMPI "
fi

#------------------------------------------------------------------------------
#  Check Parallel NetCDF if it was specified
#------------------------------------------------------------------------------
  # If parallel netcdf specified, check that as well.
if [ "$bintraj" = 'yes' ]; then
  if [ "$mpi" = 'yes' -a ! -z "$pnetcdf_dir" ] ; then
    printf "\nChecking parallel NetCDF...\n"
    printf "\tUsing parallel NetCDF from '$pnetcdf_dir'\n"
    pnetcdflib="-L$pnetcdf_dir/lib -lpnetcdf"
    pnetcdfinc="-I$pnetcdf_dir/include"
    pnetcdfdef="-DHAS_PNETCDF"
    cat > testp.cpp <<EOF
#include <cstdio>
#include <pnetcdf.h>
void unused() {int ncid; ncmpi_open(MPI_COMM_WORLD, "foo.nc", NC_NOWRITE, MPI_INFO_NULL, &ncid);}
int main() { printf("Testing\n"); printf("%s\n",ncmpi_strerror(0)); return 0; }
EOF
    COMPILELINE="$cplusplus $pnetcdfinc -o testp testp.cpp $pnetcdflib"
    $COMPILELINE > /dev/null 2> compile.err
    err=$?
    if [ $err -eq 0 ] ; then
      ./testp | grep "Testing" > /dev/null
      err=$?
    fi
    if [ $err -ne 0 ] ; then
      echo "Error: Unable to compile with parallel NetCDF using:"
      echo "       $COMPILELINE"
      echo "  Please check your compiler settings or configure flags. Error follows:"
      echo "  --------------------"
      cat compile.err
      echo "  --------------------"
      echo ""
      exit 1
    fi
    /bin/rm -f testp testp.cpp compile.err
    echo "OK"
  fi
fi

#------------------------------------------------------------------------------
#  SANDER API: If serial, it is being built. Otherwise, check that it works.
#              Since sander does not currently build with cray compilers,
#              disable completely
#------------------------------------------------------------------------------
sanderapi_lib=""
sanderapi_def=""
sanderapi_dep=""
build_sanderapi='build_sanderapi'
if [ "$installtype" != 'serial' ] ; then
  build_sanderapi='skip_sanderapi'
fi
if [ "$cygwin" = 'yes' ] ; then
  echo ""
  echo "Warning: SANDER API currently not supported on Cygwin."
  echo ""
  build_sanderapi='skip_sanderapi'
elif [ "$compiler" = 'cray' ] ; then
  echo ""
  echo "Warning: SANDER API currently not supported with cray compilers."
  echo ""
  build_sanderapi='skip_sanderapi'
elif [ "$cuda" = 'no' ] ; then # CUDA build has no need for the sander API
  sanderapi_lib="-L\$(LIBDIR) -lsander"
  sanderapi_def="-DUSE_SANDERLIB"
  sanderapi_dep="\$(LIBDIR)/libsander\$(SHARED_SUFFIX)"
fi
if [ ! -z "$sanderapi_def" -a "$installtype" != 'serial' ] ; then
  printf "\nChecking that the SANDER API is present and usable...\n"
  err=0
  if [ ! -f "$AMBERHOME/lib/libsander.so" ]  && [ ! -f "$AMBERHOME/lib/libsander.dylib" ] ; then
    echo "  Warning: $AMBERHOME/lib/libsander.{so,dylib} not present."
    err=1
  else
    cat > testp.cpp <<EOF
#include <cstdio>
#include "sander.h"
int main() {
  if (is_setup()) sander_cleanup();
  printf("Testing\n"); return 0;
}
EOF
    COMPILELINE="$cplusplus -I$AMBERHOME/include -o testp testp.cpp -L$AMBERHOME/lib -lsander"
    $COMPILELINE > /dev/null 2> compile.err
    err=$?
    if [ $err -eq 0 ] ; then
      ./testp | grep "Testing" > /dev/null
      err=$?
    fi
    if [ $err -ne 0 ] ; then
      echo "  Warning: Compilation with the SANDER API failed. Error follows:"
      echo "  --------------------"
      cat compile.err
      echo "  --------------------"
    else
      echo "OK"
      /bin/rm -f testp testp.cpp compile.err
    fi
  fi
  if [ $err -ne 0 ] ; then
    echo "  Warning: Cannot compile with the SANDER API."
    echo "           To enable the SANDER API it is recommended that you build"
    echo "           or rebuild in serial."
    sanderapi_lib=""
    sanderapi_def=""
    sanderapi_dep=""
  fi
fi
if [ -z "$sanderapi_lib" ] ; then
  pysander='skip'
fi

#-----------------------------------------------------------------------------
#  Configure EMIL
#-----------------------------------------------------------------------------
emil=""; emillib=""
if [ "$build_emil" = 'yes' ]; then

      emil="EMIL"

      ###add emil linking for sander, pmemd and eventually everything else
      fppflags="$fppflags -DEMIL"

      ###gfortran (at least) needs stdc++ on the command line **AFTER** libemil.a
      emillib="\$(LIBDIR)/libemil.a $fc_cxx_link_flag"

      ###emil needs a different MPI flag... -DMPI will create problems with the C++ MPI headers
      if [ "$mpi" = 'yes' ]; then
          emil_mpiflags="-DUSE_MPI"
      else
          emil_mpiflags=""
      fi

fi

#    Test if mpi_cxx is needed.
#    (Inconsistent organisation of libraries between different mpis means
#      that mpi_cxx does not exist when linking with mpich mpif90;
#      but is needed with openMPI mpif90)

if [ "$mpi" = 'yes' ] && ( [ "$build_emil" = 'yes' ] || [ "$installtype" = 'cuda_parallel' ] )
then
          printf "\ntesting [C++ / fortran] cross-compile with MPI libs\n"

          libmpi_cxx=""

          ##clean test files.
          rm -f testMPICXX.C testF90_main.F90 testF90_main.o testMPICXX.o testMPICXX

          ##make a dummy MPI/C++ source file
cat > testMPICXX.C <<EOF
          #include <mpi.h>
          void cpp_mpi_func(){MPI_Start((MPI_Request *)0);}
          extern "C" {void c_fortran_hook_(){cpp_mpi_func();}}
EOF
          ##make a dummy F90 source file
cat > testF90_main.F90 <<EOF
          program testprog
          call    c_fortran_hook()
          end program
EOF
          ##try compiling without explicit request for mpi_cxx
          $cplusplus -c testMPICXX.C 2>/dev/null >/dev/null
          if [ "$?" != "0" ]; then
              echo "Error! Unable to compile MPI/C++ code with command: "
              echo "$cplusplus -c testMPICXX.C"
              echo "[C++ / MPI] code is needed for CUDA and EMIL builds."
              exit 1
          fi

          ##try compiling f90 main code
          $fc -c testF90_main.F90 2>/dev/null >/dev/null
          if [ "$?" != "0" ]; then
              echo "Error! Unable to compile F90 code with the command: "
              echo "$fc -c testF90_main.F90"
              exit 1
          fi

          ##try linking without libmpi_cxx and silently add it if fail
          $fc testF90_main.o testMPICXX.o -o testMPICXX $fc_cxx_link_flag 2>/dev/null >/dev/null
          if [ "$?" != "0" ]; then
              libmpi_cxx="-lmpi_cxx"
          fi

          ##try linking with libmpi_cxx and silently add it if fail
          $fc testMPICXX.o testF90_main.o -o testMPICXX $libmpi_cxx $fc_cxx_link_flag 2>/dev/null >/dev/null
          if [ "$?" != "0" ]; then
              libmpi_cxx="-lmpi_cxx"
          fi

          ##try linking again, with the flag set to whatever it should be, and this time
          ##report any failures
          $fc testMPICXX.o testF90_main.o -o testMPICXX $fc_cxx_link_flag $libmpi_cxx 2>/dev/null >/dev/null
          if [ "$?" != "0" ]; then
             echo ""
             echo "Error! Could not link C++ mpi code using mpi fortran linker:"
             echo "                                \"$fc $fc_cxx_link_flag $libmpi_cxx\""
             echo "[C++ / fortran / MPI] cross-linking is needed for cuda_parallel and EMIL builds."
             echo "Try: \"mpif90 -show\""
             exit 1
          fi

          ##clean test files.
          rm -f testMPICXX.C testF90_main.F90 testF90_main.o testMPICXX.o testMPICXX

          ##If emil or emil+cuda are defined, then any cuda targets are also emil
          ##targets, and we do not need to change the pmemd_cu_libs.
          if [ "$build_emil" = 'yes' ]; then
              emillib=$(echo "$emillib" "$libmpi_cxx")
          elif [ "$installtype" = 'cuda_parallel' ]; then
              pmemd_cu_libs=$(echo "$pmemd_cu_libs" "$libmpi_cxx")
          fi
          echo "OK"
fi

#------------------------------------------------------------------------------
#  If the static flag is set do not try to build anything with shared.
#------------------------------------------------------------------------------
make_saxs='install'
if [ "$static" = 'yes' ] ; then
  echo "The following components are disabled for '-static' build:"
  echo "    SAXS libraries"
  echo "    pytraj"
  make_saxs="no-shared"
  pytraj='no_pytraj'
fi

#------------------------------------------------------------------------------
#  Determine python version and whether dev libraries are installed.
#------------------------------------------------------------------------------
has_python_dev='no'
if [ ! -z "$python" ]; then
  include_py=$($python -c "from distutils import sysconfig as s; print(s.get_config_vars()['INCLUDEPY'])")
  if [ -f "${include_py}/Python.h" ]; then
    has_python_dev='yes'
  else
    echo ""
    echo "No python-devel installation found."
  fi
  python_ver=$($python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
fi

#------------------------------------------------------------------------------
#  Python-dev include directory for pysander
#------------------------------------------------------------------------------
if [ "$has_python_dev" = "no" ] ; then
    echo ""
    echo "Warning: without the Python development libraries and headers you"
    echo "         will not be able to build the Python-sander interface or"
    echo "         pytraj. If you have no need for either, this is not a problem."
    echo ""
    pysander='skip'
    pytraj='no_pytraj'
fi

#------------------------------------------------------------------------------
#  LIO GPU Library setup
#------------------------------------------------------------------------------
if [ "$lio" = 'yes' ]; then
# Checking if LIOHOME exists
   if [ -z "$LIOHOME" ]; then
      echo ""
      echo "You selected to compile AMBER with LIO support, but LIOHOME environment variable is not set!"
      echo "Configure it and retry."
      exit 1
   elif [ ! -d $LIOHOME ]; then
      echo ""
      echo "You selected to compile AMBER with LIO support, but LIOHOME environment variable is set to '$LIOHOME' -- this does"
      echo "not appear to be a directory. Configure it and retry."
      exit 1
   fi

    echo "Configuring for LIO QM GPU Library"
    cflags="$cflags -DLIO"
    fflags="$fflags -DLIO"
    liolibs="-L/usr/lib -L/usr/lib64 -L$LIOHOME/g2g/ -lg2g -L$LIOHOME/lioamber -llio-g2g"
fi
#LIOHOME

# First, be sure these variables are not set by mistake
plumed_include_file=""
plumed_load=""
plumed_dependencies=""

if [ "$static" = 'yes' ]; then
    if [ -z "$PLUMED_ROOT" ]; then
        echo "Static build without setting PLUMED_ROOT"
        echo "PLUMED will be disabled"
        plumed_load="Plumed.o"
        plumed_dependencies="Plumed.o"
    elif [ ! -f "$PLUMED_ROOT/src/lib/Plumed.inc.static" ]; then
        echo "Static build with PLUMED_ROOT=$PLUMED_ROOT"
        echo "Cannot find configuration file $PLUMED_ROOT/src/lib/Plumed.inc.static"
        echo "PLUMED will be disabled"
        plumed_load="Plumed.o"
        plumed_dependencies="Plumed.o"
    else
        echo "Static build with PLUMED_ROOT=$PLUMED_ROOT"
        echo "PLUMED will be enabled"
        plumed_include_file="$PLUMED_ROOT/src/lib/Plumed.inc.static"
    fi
else
    cflags="$cflags -D__PLUMED_HAS_DLOPEN"
    plumed_load="Plumed.o -ldl"
    plumed_dependencies="Plumed.o"
    if [ "$is_mac" = 'no' ] ; then
        # Assume ELF executable file format and use linker option export-dynamic
        plumed_load="$plumed_load -Wl,-export-dynamic"
    fi
fi

#------------------------------------------------------------------------------
# Not everything works yet with cray compilers. Need special build targets
# in certain cases.
#------------------------------------------------------------------------------
if [ "$compiler" = 'cray' ] ; then
  echo "Warning: Currently PBSA and related programs (MMPBSA, Sander, etc)"
  echo "         do not build with cray compilers."
  if [ "$installtype" = 'serial' ] ; then
    installtype='cray_serial'
  elif [ "$installtype" = 'parallel' ] ; then
    installtype='cray_parallel'
  elif [ "$installtype" = 'openmp' ] ; then
    installtype='cray_openmp'
  fi
fi

#------------------------------------------------------------------------------
#  See where we wanted to install our Python libraries
#------------------------------------------------------------------------------
if [ "$python_install" = "local" ]; then
    python_install_string="--prefix=\$(AMBERHOME)"
elif [ "$python_install" = "home" ]; then
    python_install_string="--user"
elif [ "$python_install" = "global" ]; then
    python_install_string=""
else
    echo "Unrecognized python_install: $python_install"
fi

#------------------------------------------------------------------------------
#  Make some needed directories:
#------------------------------------------------------------------------------
#  first, at the top $AMBERHOME level:
cd ../..
if [ ! -d bin ]; then
    mkdir bin
fi
if [ ! -d include ]; then
    mkdir include
fi
if [ ! -d src ]; then
    mkdir src
fi
if [ ! -d share ]; then
    mkdir share
fi
if [ ! -d logs ]; then
    mkdir logs
fi

#  next, links in AmberTools to some $AMBERHOME directories
cd AmberTools
if [ ! -x bin ]; then
    ln -s ../bin .
fi
if [ ! -x lib ]; then
    ln -s ../lib .
fi
if [ ! -x lib64 ]; then
    ln -s ../lib lib64
fi
if [ ! -x include ]; then
    ln -s ../include .
fi
if [ ! -x share ]; then
    ln -s ../share .
fi

cd src

#------------------------------------------------------------------------------
#  Finally, write out the config.h file:
#------------------------------------------------------------------------------

if [ -z "$AR" ]; then ar='ar'; else ar="$AR"; fi
cat <<EOD > config.h
#  Amber configuration file.
#  Created at `date` via $command

###############################################################################

# (1)  Location of the installation

BASEDIR=$AMBERHOME
BINDIR=$AMBERHOME/bin
LIBDIR=$AMBERHOME/lib
INCDIR=$AMBERHOME/include
DATDIR=$AMBERHOME/dat
LOGDIR=$AMBERHOME/logs

###############################################################################


#  (2) If you want NAB to search additional libraries by default, add them
#      to the FLIBS variable here.  (External libraries can also be linked into
#      NAB programs simply by including them on the command line; libraries
#      included in FLIBS are always searched.)

FLIBS=  $nablibsff -lpbsa $nablibrism $flibs_fftw3 $flibs $netcdf_flag $flibs_mkl $flibs_arch $XTRA_FLIBS
FLIBS_PTRAJ= $flibs $flibs_mkl $flibs_arch
FLIBSF= $flibsf $flibs_mkl $flibsf_arch
FLIBS_FFTW3= $flibs_fftw3
###############################################################################

#  (3)  Modify any of the following if you need to change, e.g. to use gcc
#        rather than cc, etc.

SHELL=/bin/sh
INSTALLTYPE=$installtype
BUILDAMBER=$amber

#  Set the C compiler, etc.

#  The configure script should be fine, but if you need to hand-edit,
#  here is some info:

#   Example:  CC-->gcc; LEX-->flex; YACC-->yacc (built in byacc)
#     Note: If your lexer is "really" flex, you need to set
#     LEX=flex below.  For example, on some distributions,
#     /usr/bin/lex is really just a pointer to /usr/bin/flex,
#     so LEX=flex is necessary.  In general, gcc seems to need flex.

#   The compiler flags CFLAGS and CXXFLAGS should always be used.
#   By contrast, *OPTFLAGS and *NOOPTFLAGS will only be used with
#   certain files, and usually at compile-time but not link-time.
#   Where *OPTFLAGS and *NOOPTFLAGS are requested (in Makefiles,
#   makedepend and depend), they should come before CFLAGS or
#   CXXFLAGS; this allows the user to override *OPTFLAGS and
#   *NOOPTFLAGS using the BUILDFLAGS variable.

#   AMBERBUILDFLAGS provides a hook into all stages of the build process.
#   It can be used to build debug versions, invoke special features, etc.
#   Example:  make AMBERBUILDFLAGS='-O0 -g' sander
#
CC=$cc
CFLAGS=$cflags $mpi_flag \$(CUSTOMBUILDFLAGS) $mklinc \$(AMBERBUILDFLAGS)
CNOOPTFLAGS=$cnooptflags
COPTFLAGS=$coptflags $omp_flag
AMBERCFLAGS=$ambercflags \$(AMBERBUILDFLAGS)
WARNFLAGS=$warnflag

CXX=$cplusplus
CPLUSPLUS=$cplusplus
CXXFLAGS=$cxxflags $mpi_flag \$(CUSTOMBUILDFLAGS) \$(AMBERBUILDFLAGS)
CXXNOOPTFLAGS=$cxxnooptflags
CXXOPTFLAGS=$cxxoptflags $omp_flag
AMBERCXXFLAGS=$ambercxxflags \$(AMBERBUILDFLAGS)

NABFLAGS=$nabflags \$(AMBERBUILDFLAGS)
PBSAFLAG=$pbsaflag \$(AMBERBUILDFLAGS)

FP_FLAGS=$fp_flags

LDFLAGS=$ldflags \$(CUSTOMBUILDFLAGS) \$(AMBERBUILDFLAGS)
AMBERLDFLAGS=\$(AMBERBUILDFLAGS)

LEX=   $lex
YACC=  $wine $yacc
AR=    $ar rv
M4=    $m4
RANLIB=$ranlib

#  Set the C-preprocessor.  Code for a small preprocessor is in
#    ucpp-1.3;  it gets installed as \$(BINDIR)/ucpp;

CPP=$cpp

#  These variables control whether we will use compiled versions of BLAS
#  and LAPACK (which are generally slower), or whether those libraries are
#  already available (presumably in an optimized form).

LAPACK=$lapack
BLAS=$blas
F2C=$f2c

#  These variables determine whether builtin versions of certain components
#  can be used, or whether we need to compile our own versions.

UCPP=$ucpp
C9XCOMPLEX=$c9xcomplex

#  For Windows/cygwin, set SFX to ".exe"; for Unix/Linux leave it empty:
#  Set OBJSFX to ".obj" instead of ".o" on Windows:

SFX=$suffix
OSFX=$objsuffix
MV=$localmv
RM=$localrm
CP=$localcp
WINE=$wine

#  Information about Fortran compilation:

FC=$fc
FFLAGS= $fflags \$(LOCALFLAGS) \$(CUSTOMBUILDFLAGS) -I\$(INCDIR) \$(NETCDFINC) $mklinc \$(AMBERBUILDFLAGS)
FNOOPTFLAGS= $fnooptflags
FOPTFLAGS= $foptflags
AMBERFFLAGS=\$(AMBERBUILDFLAGS)
FREEFORMAT_FLAG= $freeformat_flag
LM=$lm
FPP=$fpp
FPPFLAGS=$fppflags $mpi_flag \$(CUSTOMBUILDFLAGS) \$(AMBERBUILDFLAGS)
AMBERFPPFLAGS=\$(AMBERBUILDFLAGS)
FCREAL8=$fcreal8
NOFORTRANMAIN=$flibs_arch
FWARNFLAGS=$fwarnflag

XHOME= $xhome
XLIBS= $xlibs
MAKE_XLEAP=$make_xleap

NETCDF=$netcdf
NETCDFLIB=$netcdfflagc
NETCDFLIBF=$netcdfflagf
NETCDFINC=$netcdfinc
PNETCDFLIB=$pnetcdflib
PNETCDFINC=$pnetcdfinc
PNETCDFDEF=$pnetcdfdef
FFTWLIB=$flibs_fftw3
SANDERAPI_LIB=$sanderapi_lib
SANDERAPI_DEF=$sanderapi_def
SANDERAPI_DEP=$sanderapi_dep
BUILD_SANDERAPI=$build_sanderapi

EMIL=$emil
EMILLIB=$emillib

ZLIB=$zlib
BZLIB=$bzlib

HASFC=$hasfc
MTKPP=$mtkpp
XBLAS=$xblas
FFTW3=$fftw3
MDGX=$mdgx

COMPILER=$compiler
MKL=$MKL_HOME
MKL_PROCESSOR=$mkl_processor
READLINE=$readline

#CUDA Specific build flags
NVCC=$nvcc
PMEMD_CU_INCLUDES=$pmemd_cu_includes
PMEMD_CU_LIBS=$pmemd_cu_libs
PMEMD_CU_DEFINES=$pmemd_cu_defines

#PMEMD Specific build flags
PMEMD_F90=$fc $mpi_flag $fppflags $pmemd_fpp_flags
PMEMD_FOPTFLAGS=$pmemd_foptflags \$(AMBERBUILDFLAGS)
PMEMD_CC=$cc
PMEMD_COPTFLAGS=$pmemd_coptflags $mpi_flag \$(AMBERBUILDFLAGS)
PMEMD_FLIBSF=$flibs_mkl $win_mpilibs $emillib
PMEMD_LD=$ld \$(AMBERBUILDFLAGS)
LDOUT=$ldout
PMEMD_GNU_BUG303=$pmemd_gnu_bug303

#for NAB:
MPI=$mpinab

#1D-RISM
RISM=$rism

#3D-RISM NAB
RISMSFF=$rismsff
SFF_RISM_INTERFACE=$sff_rism_interface
TESTRISMSFF=$testrismsff

#3D-RISM SANDER
RISMSANDER=$rismsander
SANDER_RISM_INTERFACE=$sander_rism_interface
FLIBS_RISMSANDER=$flibs_rismsander

#for EMIL:
EMIL_MPIFLAGS=$emil_mpiflags

#PUPIL
PUPILLIBS=$pupillibs

#Python interpreter we are using and install options
PYTHON=$python
PYTHON_INSTALL=$python_install_string
SKIP_PYTHON=$skippython

PYSANDER=$pysander
PYTRAJ=$pytraj
MAKE_SAXS=$make_saxs

#For LIO QM GPU Library
LIOLIBS=$liolibs

# OS-specific rules for making shared objects
SHARED_SUFFIX=$shared_suffix
MAKE_SHARED=$make_shared

# PLUMED related variables:
PLUMED_INCLUDE_FILE=$plumed_include_file
PLUMED_LOAD=$plumed_load
PLUMED_DEPENDENCIES=$plumed_dependencies
EOD

echo " "
echo "The configuration file, config.h, was successfully created."
echo " "

# Write resource files
cat > $ambhome/amber.sh << EOF
export AMBERHOME="$ambhome"
export PATH="\${AMBERHOME}/bin:\${PATH}"
EOF

if [ "$python_install" = "local" ]; then
cat >> $ambhome/amber.sh << EOF
# Add location of Amber Python modules to default Python search path
if [ -z "\$PYTHONPATH" ]; then
    export PYTHONPATH="\${AMBERHOME}/lib/python$python_ver/site-packages"
else
    export PYTHONPATH="\${AMBERHOME}/lib/python$python_ver/site-packages:\${PYTHONPATH}"
fi
EOF
fi # python_install

cat > $ambhome/amber.csh << EOF
setenv AMBERHOME "$ambhome"
setenv PATH "\${AMBERHOME}/bin:\${PATH}"
EOF

if [ "$python_install" = "local" ]; then
cat >> $ambhome/amber.csh << EOF
# Add location of Amber Python modules to default Python search path
if( ! (\$?PYTHONPATH) ) then
    setenv PYTHONPATH "\${AMBERHOME}/lib/python$python_ver/site-packages"
else
    setenv PYTHONPATH "\${AMBERHOME}/lib/python$python_ver/site-packages:\${PYTHONPATH}"
endif
EOF
fi # python_install

if [ "$is_mac" = 'no' ]; then
# For Linux machines, we need to augment LD_LIBRARY_PATH as well
cat >> $ambhome/amber.sh << EOF
if [ -z "\${LD_LIBRARY_PATH}" ]; then
   export LD_LIBRARY_PATH="\${AMBERHOME}/lib"
else
   export LD_LIBRARY_PATH="\${AMBERHOME}/lib:\${LD_LIBRARY_PATH}"
fi
EOF

cat >> $ambhome/amber.csh << EOF
if( ! (\$?LD_LIBRARY_PATH) ) then
   setenv LD_LIBRARY_PATH "\${AMBERHOME}/lib"
else
   setenv LD_LIBRARY_PATH "\${AMBERHOME}/lib:\${LD_LIBRARY_PATH}"
endif
EOF

# See if this Python is new enough to run ParmEd
$python << EOF
import sys
if sys.version_info < (2, 7):
    print('')
    print('ParmEd requires Python 2.7 or newer to run. AmberTools will be')
    print('built without ParmEd')
    print('')
EOF

fi
echo "--------------------------------------------------------------------------------"
echo "Environment resource files are provided to set the proper environment"
echo "variables to use AMBER and AmberTools. This is required to run any Python"
echo "programs (like MMPBSA.py, ParmEd, MCPB.py, and pytraj)"
echo ""
echo "If you use a Bourne shell (e.g., bash, sh, zsh, etc.), source the"
echo "$ambhome/amber.sh file in your shell. Consider adding the line"
echo "  test -f $ambhome/amber.sh && source $ambhome/amber.sh"
echo "to your startup file (e.g., ~/.bashrc)"
echo ""
echo "If you use a C shell (e.g., csh, tcsh), source the"
echo "$ambhome/amber.csh file in your shell. Consider adding the line"
echo "  test -f $ambhome/amber.csh && source $ambhome/amber.csh"
echo "to your startup file (e.g., ~/.cshrc)"
echo ""
echo "(You need to do the above before running 'make install')"

if [ "$cuda" = 'yes' ]; then
   echo ""
   echo "If you have not already done so, you may need to add $CUDA_HOME/lib"
   echo "and/or $CUDA_HOME/lib64 to LD_LIBRARY_PATH using the command"
   echo "  export LD_LIBRARY_PATH=\"${CUDA_HOME}/lib:\${LD_LIBRARY_PATH}\" (bash, sh)"
   echo "  setenv LD_LIBRARY_PATH \"${CUDA_HOME}/lib:\${LD_LIBRARY_PATH}\" (tcsh, csh)"
fi
if [ "$mpi" = 'yes' -a -z "$pnetcdf_dir" ] ; then
  printf "\nWarning: No parallel NetCDF specified (--with-pnetcdf <dir>).\n"
  printf "         Parallel NetCDF trajectory output will not be available\n"
  printf "         in cpptraj.MPI.\n\n"
fi
echo "--------------------------------------------------------------------------------"
echo ""

echo "The next step is to source the amber.sh or amber.csh file"
echo "  (if needed, see above), and then to type 'make install'"

echo ""

#  make a copy of config.h in the AMBERHOME/src directory
#  make it a link so that changing one changes the other if we can
if [ -d ../../src ]; then
   if [ -e ../../src/config.h ]; then
      /bin/rm -f ../../src/config.h
   fi
   if [ -x /bin/ln ]; then
      cd ../../src && /bin/ln -s ../AmberTools/src/config.h
      cd ../AmberTools/src
   else
      /bin/cp -f config.h ../../src
   fi
fi

exit

